<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="NCI" Id="{16dbd6ae-95f0-0ec5-359a-2aaa1cf7baac}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM NCI
VAR
  sState          : ARRAY[1..GVL_NCI.cMaxNciCh] OF STRING;


  _idx            : DINT;
  _stAxisIndexItf : ARRAY[1..GVL_NCI.cMaxNciCh] OF ST_Interface_Group;

  _I_McAxis       : ARRAY[1..GVL_NCI.cMaxNciCh]     OF 
                    ARRAY[1..GVL_NCI.cMcAxisCount]  OF I_McAxis;

  _I_AuxAxis      : ARRAY[1..GVL_NCI.cMaxNciCh]     OF 
                    ARRAY[1..GVL_NCI.cAuxAxisCount] OF I_McAxis;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF NOT GVL_NCI.cNci
THEN
  FOR _idx := 1 TO GVL_NCI.cMaxNciCh
  DO
    GVL_NCI.gstChannelState[_idx].eState        := e_Ctrl_NciCommand.NO_NCI;
  END_FOR
  RETURN;

ELSE
  FOR _idx := 1 TO GVL_NCI.cMaxNciCh
  DO
    IF NOT (GVL_NCI.gstAxisConfig[_idx].nXAxisId > 0) OR
       NOT (GVL_NCI.gstAxisConfig[_idx].nYAxisId > 0) OR
       NOT (GVL_NCI.gstAxisConfig[_idx].nZAxisId > 0)
    THEN
      GVL_NCI.gstChannelState[_idx].eState      := e_Ctrl_NciCommand.NO_AXIS_GROUP; // no valid NC AxisId
      sState[_idx]                              := TO_STRING(_idx);
      sState[_idx]                              := concat(sState[_idx], ': no valid NC AxisId');
      RETURN;
    END_IF
  END_FOR

  FOR _idx := 1 TO GVL_NCI.cMaxNciCh
  DO
    IF NOT (GVL_NCI.gstAxisIndex[_idx].nXAxisIdx > 0) OR
       NOT (GVL_NCI.gstAxisIndex[_idx].nYAxisIdx > 0) OR
       NOT (GVL_NCI.gstAxisIndex[_idx].nZAxisIdx > 0) OR
           (GVL_NCI.gstAxisIndex[_idx].nXAxisIdx > TO_UDINT(GVL_AXIS_CTRL.gciMaxAxis)) OR
           (GVL_NCI.gstAxisIndex[_idx].nYAxisIdx > TO_UDINT(GVL_AXIS_CTRL.gciMaxAxis)) OR
           (GVL_NCI.gstAxisIndex[_idx].nZAxisIdx > TO_UDINT(GVL_AXIS_CTRL.gciMaxAxis))
    THEN
      GVL_NCI.gstChannelState[_idx].eState      := e_Ctrl_NciCommand.NO_AXIS_INDEX; // no valid fb_AxisController[] index
      sState[_idx]                              := TO_STRING(_idx);
      sState[_idx]                              := concat(sState[_idx], ': no valid fb_AxisController[] index');
      RETURN;
    END_IF
  END_FOR
END_IF

FOR _idx := 1 TO GVL_NCI.cMaxNciCh
DO
  // NCI axis configuration --> NC AxisId used
  GVL_NCI.gfbNciCtrl[_idx].GroupAxisConfig      := GVL_NCI.gstAxisConfig[_idx];


  // fb_AxisController.fbAxis I_McAxis configuration --> index of gfbAxisController is used
  IF (GVL_NCI.gstAxisIndex[_idx].nXAxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_XAxis           := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nXAxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nYAxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_YAxis           := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nYAxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nZAxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_ZAxis           := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nZAxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nQ1AxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_Q1Axis          := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nQ1AxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nQ2AxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_Q2Axis          := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nQ2AxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nQ3AxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_Q3Axis          := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nQ3AxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nQ4AxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_Q4Axis          := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nQ4AxisIdx].fbAxis;
  END_IF

  IF (GVL_NCI.gstAxisIndex[_idx].nQ5AxisIdx > 0)
  THEN
    _stAxisIndexItf[_idx].I_Idx_Q5Axis          := GVL_AXIS_CTRL.gfbAxisController[GVL_NCI.gstAxisIndex[_idx].nQ5AxisIdx].fbAxis;
  END_IF


  _I_McAxis[_idx][1]                            := _stAxisIndexItf[_idx].I_Idx_XAxis;
  _I_McAxis[_idx][2]                            := _stAxisIndexItf[_idx].I_Idx_YAxis;
  _I_McAxis[_idx][3]                            := _stAxisIndexItf[_idx].I_Idx_ZAxis;

  _I_AuxAxis[_idx][1]                           := _stAxisIndexItf[_idx].I_Idx_Q1Axis;
  _I_AuxAxis[_idx][2]                           := _stAxisIndexItf[_idx].I_Idx_Q2Axis;
  _I_AuxAxis[_idx][3]                           := _stAxisIndexItf[_idx].I_Idx_Q3Axis;
  _I_AuxAxis[_idx][4]                           := _stAxisIndexItf[_idx].I_Idx_Q4Axis;
  _I_AuxAxis[_idx][5]                           := _stAxisIndexItf[_idx].I_Idx_Q5Axis;

  GVL_NCI.gfbNciCtrl[_idx].I_McAxis             := _I_McAxis[_idx];
  GVL_NCI.gfbNciCtrl[_idx].I_AuxAxis            := _I_AuxAxis[_idx];

  // R Parameter properties
  GVL_NCI.gfbNciCtrl[_idx].R_ParamIndex         := GVL_NCI.gstRParameter[_idx]._nStart;
  GVL_NCI.gfbNciCtrl[_idx].R_ParamCount         := GVL_NCI.gstRParameter[_idx]._nCount;
  GVL_NCI.gfbNciCtrl[_idx].R_Param_Read         := GVL_NCI.gstRParameter[_idx]._rRParamsRead;
  GVL_NCI.gfbNciCtrl[_idx].R_Param_Write        := GVL_NCI.gstRParameter[_idx]._rRParamsWrite;

  // ProgName for channel
  GVL_NCI.gfbNciCtrl[_idx].NcProg               := GVL_NCI.gsProgName[_idx];

  // check REAL value to avoid exception
  IF NOT IsFinite(F_Real(GVL_NCI.gstChannelCtrl[_idx].rOverride))
  THEN
    GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.Override := 0.0;
  ELSE
    GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.Override := GVL_NCI.gstChannelCtrl[_idx].rOverride;
  END_IF



  // call nci channel controller
  GVL_NCI.gfbNciCtrl[_idx].eCmd                 := GVL_NCI.gstChannelCtrl[_idx].eCmd;
  GVL_NCI.gfbNciCtrl[_idx].Cycle();




  // write states onto global struct
  GVL_NCI.gstChannelState[_idx].eState          := GVL_NCI.gfbNciCtrl[_idx].eState;
  GVL_NCI.gstChannelState[_idx].nItpState       := GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.GetItpState();
  GVL_NCI.gstChannelState[_idx].rAxisOverride   := GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.GetChannelOverride();
  GVL_NCI.gstChannelState[_idx].bMFuncReq       := GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.HSK;
  GVL_NCI.gstChannelState[_idx].nMFunc          := TO_WORD(GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.MFunc);


  GVL_NCI.gsProgNameActive[_idx]                := GVL_NCI.gfbNciCtrl[_idx].I_NcChannel.Prog;
  sState[_idx]                                  := GVL_NCI.gfbNciCtrl[_idx].sCmd;
END_FOR


]]></ST>
    </Implementation>
    <LineIds Name="NCI">
      <LineId Id="10" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="135" Count="6" />
      <LineId Id="146" Count="1" />
      <LineId Id="142" Count="2" />
      <LineId Id="134" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="46" Count="1" />
      <LineId Id="176" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="81" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="98" Count="28" />
      <LineId Id="201" Count="9" />
      <LineId Id="52" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="87" Count="3" />
      <LineId Id="92" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="129" Count="1" />
      <LineId Id="184" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="185" Count="1" />
      <LineId Id="188" Count="6" />
      <LineId Id="198" Count="1" />
      <LineId Id="171" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="241" Count="0" />
      <LineId Id="172" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="256" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="196" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>