<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_XenaxEtherCATHoming" Id="{0059bec8-ca10-4de9-afbb-50d2472997fe}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_XenaxEtherCATHoming
VAR_INPUT

  bExecute        :BOOL;

  bAbort          :BOOL:=FALSE;
END_VAR
VAR_IN_OUT
  Axis            :AXIS_REF;
END_VAR
VAR_OUTPUT
  Done            :BOOL;    (* successfully done *)
  Busy            :BOOL;    (* busy, not in initial state *)
  Error           :BOOL;    (* Error flag *)
  ErrorId         :UDINT;   (* Error code *)
END_VAR

VAR CONSTANT

END_VAR
VAR
  fbCoEReadParameter        : FB_EcCoESdoRead;
  fbCoEWriteParameter       : FB_EcCoESdoWrite;
  WriteNC                   : ADSWRITE;
  ReadNC                    : ADSREAD;
  ResetAxis                 : MC_Reset;

  abySend,
  abyReceive                : ARRAY[0..10] OF BYTE;




  state                     : INT;
  ErrorState                : INT;   (* state where the latest error occured *)
  LagDistanceMonitoring     : UINT;
  SavedLagDistanceMonitoring: UINT;
  Trigger                   : R_TRIG;
  Delay                     : TON;
  ExecuteOffTrigger         : F_TRIG;
  NcReferenceFlag           : DWORD;

  fbGetAmsNetID             : FB_GetAxisAmsAddr;

  sEtherCATNetId            : STRING; (*Master Ethercat AMS Adress *)
  nSlaveAddr                : INT := 1001;  (* Slave adress in system manager *)

  lrPosBefore               : LREAL;
  lrPosAfter                : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*****************************************************************************************************)
(*  Jenny Science AG                              *)
(*                                    *)
(*  Date    : 22.08.2011                      *)
(*****************************************************************************************************)
(*  Version   : 1.51                            *)
(*****************************************************************************************************)
(*  Description : Exemple for Homing Programm for Xenax Xvi75v8     *)
(*                                            1.51 *smal correction on step 62                                     *)
(*                                            1.5 Control that Homing start correctly                                    *)
(*                                            1.4 Wait Homing Done with Object 2006 Bit 1                                   *)
(*                                            1.3 Resolution of negativ position after Homing                              *)
(*****************************************************************************************************)
ExecuteOffTrigger(CLK:=bExecute);



CASE state OF
(*************************************************************************************************************************)
 (* initial state, wait for trigger *)
  0 :
    Busy := FALSE;
    Trigger( CLK:=bExecute );
    IF Trigger.Q THEN
      state := 10;
    END_IF

  10:
    fbGetAmsNetID(  sNetId:= '',
            iAxisId:= TO_UINT(Axis.NcToPlc.AxisId),
            bExecute := TRUE);
    IF NOT fbGetAmsNetID.bBusy AND NOT fbGetAmsNetID.bError THEN
      sEtherCATNetId  := fbGetAmsNetID.AxisNetId;
      nSlaveAddr    := TO_INT(fbGetAmsNetID.AxisPort);

      fbGetAmsNetID(  sNetId:= '',
              iAxisId:= TO_UINT(Axis.NcToPlc.AxisId),
              bExecute := FALSE);
      Busy := TRUE;
      Done := FALSE;
      Error := FALSE;
      ErrorID := 0;
      ErrorState := 0;
      WriteNC( WRITE:=FALSE );
      ReadNC( READ:=FALSE );
      ResetAxis(Execute:=FALSE, Axis:=Axis);
      Delay(IN:=FALSE);
      state := 15;
  END_IF
(* Read lag distance monitoring *)
  15 :
    ReadNC  (NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXPARMS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#20010 , LEN:=SIZEOF(SavedLagDistanceMonitoring) , DESTADDR:=ADR(SavedLagDistanceMonitoring) , READ:=TRUE , TMOUT:=T#1S);
    IF NOT ReadNC.Busy AND NOT ReadNC.Err THEN
      ReadNC( READ:=FALSE );
      state := 20;
    END_IF
(* Desable lag distance monitoring  *)
  20 :
    LagDistanceMonitoring := 0;
    WriteNC(NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXPARMS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#20010 , LEN:=SIZEOF(LagDistanceMonitoring) , SRCADDR:=ADR(LagDistanceMonitoring) , WRITE:=TRUE , TMOUT:=T#1s);
    IF NOT WriteNC.Busy AND NOT WriteNC.Err THEN
      WriteNC( WRITE:=FALSE );
      state := 25;
    END_IF
(*************************************************************************************************************************)
 (* disable NC reference flag *)
  25 :
    NcReferenceFlag := 0;
    WriteNC(NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXFUNCS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#1B , LEN:=SIZEOF(NcReferenceFlag) , SRCADDR:=ADR(NcReferenceFlag) , WRITE:=TRUE , TMOUT:=T#1s);
    IF NOT WriteNC.Busy AND NOT WriteNC.Err THEN
      WriteNC( WRITE:=FALSE );
      state := 30;
    END_IF
(*************************************************************************************************************************)
(* Set OpMode 6 -> Start Homing *)
  30 :
    fbCoEWriteParameter.nIndex    := 16#6060;
    fbCoEWriteParameter.nSubIndex := 0;
    abySend[0]            :=6;
    fbCoEWriteParameter.cbBufLen    :=1;
    fbCoEWriteParameter.bExecute  := TRUE;
    state := 40;
(*************************************************************************************************************************)
  40 :
    IF NOT fbCoEWriteParameter.bBusy THEN
      fbCoEWriteParameter.bExecute  := FALSE;
        state := 50;
    END_IF;

(*************************************************************************************************************************)
(* Control that the Homing method is setting into the Xenax , after 500ms                                                               *)
  50 :

    Delay(IN:=TRUE , PT:=t#500ms );
    IF Delay.Q THEN
      fbCoEReadParameter.nIndex   := 16#6061;
      fbCoEReadParameter.nSubIndex  := 0;
      fbCoEReadParameter.cbBufLen   := 1;
      fbCoEReadParameter.bExecute   := TRUE;
      Delay(IN:=FALSE);
      state := 51;
    END_IF

(*************************************************************************************************************************)
 (*  if the method is correctly setted goes next (step 70), else repeat the setting method *)
  51:

    IF NOT fbCoEReadParameter.bBusy THEN

      fbCoEReadParameter.bExecute   := FALSE;

      IF abyReceive[0] = 6 THEN
        state := 70;
      ELSE
        state := 60;
      END_IF
    END_IF;

(*************************************************************************************************************************)
 (* Repeat the Homing started Method *)
(* Set OpMode 6 -> 0*)
  60 :
    fbCoEWriteParameter.nIndex    := 16#6060;
    fbCoEWriteParameter.nSubIndex := 0;
    abySend[0]            :=0;
    fbCoEWriteParameter.cbBufLen    :=1;
    fbCoEWriteParameter.bExecute  := TRUE;
    state := 61;
  61 :
    IF NOT fbCoEWriteParameter.bBusy THEN
      fbCoEWriteParameter.bExecute  := FALSE;
        state := 62;
    END_IF;
(*************************************************************************************************************************)
(* Wait Time *)
  62 :
    Delay(IN:=TRUE , PT:=t#500ms );
    IF Delay.Q THEN
      Delay(IN:=FALSE);
      state := 30;
    END_IF

(*************************************************************************************************************************)
(*Read Axis referenced after 200ms *)
  70 :

    Delay(IN:=TRUE , PT:=t#200ms );
    IF Delay.Q THEN
      fbCoEReadParameter.nIndex   := 16#2006;
      fbCoEReadParameter.nSubIndex  := 0;
      fbCoEReadParameter.cbBufLen   :=4;
      fbCoEReadParameter.bExecute   := TRUE;
      Delay(IN:=FALSE);
      state := 80;
    END_IF

(*************************************************************************************************************************)
 (* Wait Achse referenced *)
  80:

    IF NOT fbCoEReadParameter.bBusy THEN

      fbCoEReadParameter.bExecute   := FALSE;

      IF abyReceive[0].1 THEN
        lrPosBefore := Axis.NcToPlc.ActPos;
        state := 90;
      ELSE
        state := 70;

      END_IF
END_IF;

(*************************************************************************************************************************)
 (* Wait some time before resetting the TwinCAT axis position *)
  90 :
    Delay(IN:=TRUE , PT:=t#200ms );
    IF Delay.Q THEN
      lrPosAfter := Axis.NcToPlc.ActPos;

      Delay(IN:=FALSE);
      state := 110;
    END_IF

(*************************************************************************************************************************)
 (* Reset *)
  110:
    ResetAxis(Execute:=TRUE , Axis:=Axis );
    IF ResetAxis.Done OR ResetAxis.Error THEN
      ResetAxis(Execute:=FALSE, Axis:=Axis);
      state :=200;
    END_IF
(*************************************************************************************************************************)
(* set lag distance monitoring to its original value *)
  200 :
    WriteNC(NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXPARMS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#20010 , LEN:=SIZEOF(SavedLagDistanceMonitoring) , SRCADDR:=ADR(SavedLagDistanceMonitoring) , WRITE:=TRUE , TMOUT:=T#1s);
    IF NOT WriteNC.Busy AND NOT WriteNC.Err THEN
      WriteNC( WRITE:=FALSE );
      state := 210;
    END_IF
(*************************************************************************************************************************)
 (* Enable NC reference flag *)
  210 :
    NcReferenceFlag := 1;
    WriteNC(NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXFUNCS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#1B , LEN:=SIZEOF(NcReferenceFlag) , SRCADDR:=ADR(NcReferenceFlag) , WRITE:=TRUE , TMOUT:=T#1s);
    IF NOT WriteNC.Busy AND NOT WriteNC.Err THEN
      WriteNC( WRITE:=FALSE );
      state := 220;
    END_IF
(*************************************************************************************************************************)
(* Set OpMode 8 *)
  220 :
    fbCoEWriteParameter.nIndex    := 16#6060;
    fbCoEWriteParameter.nSubIndex := 0;
    abySend[0]            :=8;
    fbCoEWriteParameter.cbBufLen    :=1;
    fbCoEWriteParameter.bExecute  := TRUE;
    state := 230;
(*************************************************************************************************************************)
(* Wait end*)
  230 :
  IF NOT fbCoEWriteParameter.bBusy THEN
    fbCoEWriteParameter.bExecute  := FALSE;
      state := 240;
  END_IF;
(*************************************************************************************************************************)
(* Wait 200ms*)
  240 :
    Delay(IN:=TRUE , PT:=t#200ms );
    IF Delay.Q THEN
      Delay(IN:=FALSE);
      state := 1000;
    END_IF


(***************************************************************************************************************)
(*ABORT*)
(*************************************************************************************************************************)
(*************************************************************************************************************************)
 (* Reset *)
  400:
    ResetAxis(Execute:=TRUE , Axis:=Axis);
    IF ResetAxis.Done OR ResetAxis.Error THEN
      ResetAxis(Execute:=FALSE, Axis:=Axis);
      state :=410;
    END_IF
(*************************************************************************************************************************)
(* set lag distance monitoring to its original value *)
  410 :
    LagDistanceMonitoring := 0;
    WriteNC(NETID:='' , PORT:=AMSPORT_R0_NC , IDXGRP:=NCIDXG_AXPARMS+DWORD_TO_UINT(Axis.NcToPlc.AxisId) , IDXOFFS:=16#20010 , LEN:=SIZEOF(SavedLagDistanceMonitoring) , SRCADDR:=ADR(SavedLagDistanceMonitoring) , WRITE:=TRUE , TMOUT:=T#1s);
    IF NOT WriteNC.Busy AND NOT WriteNC.Err THEN
      WriteNC( WRITE:=FALSE );
      state := 420;
    END_IF
(*************************************************************************************************************************)
(* Set OpMode 8 *)
  420 :
    fbCoEWriteParameter.nIndex    := 16#6060;
    fbCoEWriteParameter.nSubIndex := 0;
    abySend[0]            :=8;
    fbCoEWriteParameter.cbBufLen    :=1;
    fbCoEWriteParameter.bExecute  := TRUE;
    state := 430;
(*************************************************************************************************************************)
(* Wait end of Set OpMode 8 *)
  430 :
  IF NOT fbCoEWriteParameter.bBusy THEN
    fbCoEWriteParameter.bExecute  := FALSE;
      state := 1000;
  END_IF;
(*************************************************************************************************************************)
(* End *)
  1000 :
    Done:=TRUE;
    Busy:=FALSE;
    IF NOT bExecute AND NOT bAbort THEN
      state:=0;
      Done:=FALSE;
    END_IF;
END_CASE

(* check for errors *)
IF state <> 0 THEN
  IF WriteNC.ERR AND WriteNC.WRITE THEN
    Error := TRUE;
    ErrorId := WriteNC.ErrId;
  ELSIF ReadNC.ERR AND ReadNC.READ THEN
    Error := TRUE;
    ErrorId := ReadNc.ErrId;
  END_IF
  IF Error THEN
    ErrorState := state;
    state := 0;
  END_IF
END_IF


fbCoEReadParameter(   sNetId    := sEtherCATNetId,
            nSlaveAddr  := TO_UINT(nSlaveAddr),
            tTimeout    := T#500ms,
            pDstBuf   :=ADR(abyReceive));

fbCoEWriteParameter(    sNetId    := sEtherCATNetId,
            nSlaveAddr  := TO_UINT(nSlaveAddr),
            pSrcBuf   :=ADR(abySend),
            tTimeout    := T#500ms);]]></ST>
    </Implementation>
    <LineIds Name="FB_XenaxEtherCATHoming">
      <LineId Id="50" Count="31" />
      <LineId Id="83" Count="274" />
    </LineIds>
  </POU>
</TcPlcObject>