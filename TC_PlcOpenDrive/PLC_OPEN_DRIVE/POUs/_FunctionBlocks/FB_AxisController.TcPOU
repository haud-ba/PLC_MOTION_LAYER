<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_AxisController" Id="{417bf747-2026-4a9e-823d-1309d284a5a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AxisController
VAR_INPUT
	stCtrl					      : ST_In;
	bSS1						      : BOOL := TRUE; // can be used by Safety Alias device
END_VAR
VAR_OUTPUT
	stState					      : ST_Out;
	bXenaxDrive			      : BOOL;
	bSercosAxis			      : BOOL;	// SERCOS encodertype
END_VAR
VAR_IN_OUT
	stHomingOptions	      : ST_HomeParams;
	stNcParameter		      : ST_NcParam;
  stMotionOptions       : ST_MotionOptions;
END_VAR
VAR
	bInit								  : BOOL;
	uiState,
	uiInitState,
	iSizeOut,
	iSizeIn,
  uiStateSS1  				  : UINT;
	sAxisName						  : STRING;
	eState							  : e_AxisFunction;
	eStateOld						  : e_AxisFunction;
	eStateActive				  : e_AxisFunction;
	eStateExec					  : e_AxisFunction; // for logging execution state only
	eStateExecOld				  : e_AxisFunction; // for logging execution state only

  sState, 
  sStateOld, 
  sStateExec            : STRING(256);

	fbAxis							  : FB_McPtpAxis;
	fbResetSercos				  : fb_ResetSercos;					// SOE Reset for Sercos Axis (e.g. AX5000)
	fbXenaxHoming				  : FB_XenaxEtherCATHoming; // for Jenny Science, the homing has to be switched to Xenax
	fbCoeRead						  : Tc2_MC2_Drive.FB_CoERead;

  fbGearIn              : Tc2_MC2.MC_GearIn;
  fbGearInMultiMaster   : Tc2_MC2.MC_GearInMultiMaster;
  fbGearOut             : Tc2_MC2.MC_GearOut;
  _pAxis1               : POINTER TO Tc2_MC2.AXIS_REF;
  _pAxis2               : POINTER TO Tc2_MC2.AXIS_REF;
  _pAxis3               : POINTER TO Tc2_MC2.AXIS_REF;
  _pAxis4               : POINTER TO Tc2_MC2.AXIS_REF;
  _stGearIn             : st_GearIn;
  _stGearInMultiMaster  : st_GearInMultiMaster;	  

	_stCamIn              : st_CamIn;

	sDriveType					  : STRING(256); // manufacturer device name CoE 16#1008

	bHomeSensor					  AT %I* : BOOL;
	bLimitMin					    AT %I* : BOOL;
	bLimitMax					    AT %I* : BOOL;

	bFastStop						  AT %Q* : BOOL;
{attribute 'displaymode':='bin'}
	udiDriveInput				  AT %I* : UDINT;
	bDriveInputCal			  : BOOL;
	stMcOut							  : Tc2_MC2.ST_McOutputs;

	tUpdate			          : TIME := T#10S;
  tonTimeout            : Tc2_Standard.TON;
	tonWait			          : Tc2_Standard.TON;
	tonWaitSeq	          : Tc2_Standard.TON;

	_stStatusCompact	    : ST_AxisStatusCompact;
	bHasLagMonitoring	    : BOOL;

	rSetPos, 
  rTmp 		              : LREAL;

	stMsg				          : ST_Message;
 {attribute 'hide'} 
	st_AxisREF_Dummy	    : Tc2_MC2.AXIS_REF;
 {attribute 'hide'}
  mcResetMaster         : Tc2_MC2.MC_Reset;
END_VAR
VAR CONSTANT
	sXenax			: STRING := 'XENAX Xvi';
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
-------------------------------------------------------------------------------
	update AxisRef and assign CalibrationCam
-------------------------------------------------------------------------------
*)
fbAxis();
fbAxis.SpeedOverride := stCtrl.rOverride;

IF NOT bInit
THEN
  Axis_Init();
END_IF

(*
-------------------------------------------------------------------------------
	NaN INF check
-------------------------------------------------------------------------------
*)
IF NOT IsFinite(F_LReal(stCtrl.rSetPos))
THEN
	stCtrl.rSetPos := 0.0;
END_IF

IF NOT IsFinite(F_LReal(stCtrl.rSetVelo))
THEN
	stCtrl.rSetVelo := 0.0;
END_IF

IF NOT IsFinite(F_LReal(stCtrl.rAcc))
THEN
	stCtrl.rAcc := 0.0;
END_IF

IF NOT IsFinite(F_LReal(stCtrl.rDec))
THEN
	stCtrl.rDec := 0.0;
END_IF

IF NOT IsFinite(F_LReal(stCtrl.rOverride))
THEN
	stCtrl.rOverride := 0.0;
END_IF



(*
-------------------------------------------------------------------------------
	assign CalibrationCam
-------------------------------------------------------------------------------
*)

IF stHomingOptions.SimulateHomeSensor THEN
	IF fbAxis.pAxisRef^.NcToPlc.HomingState < 4 THEN
		bDriveInputCal := TRUE;
	ELSE
		bDriveInputCal := FALSE;
	END_IF
ELSIF stHomingOptions.HomeOnLimitMin THEN
	bDriveInputCal := bLimitMin XOR stHomingOptions.InvertHomeSensor;
ELSIF stHomingOptions.HomeOnLimitMax THEN
	bDriveInputCal := bLimitMax XOR stHomingOptions.InvertHomeSensor;
ELSE
	bDriveInputCal := bHomeSensor XOR stHomingOptions.InvertHomeSensor;
END_IF

fbAxis.CalibrationCam := ADR(bDriveInputCal);

(*
-------------------------------------------------------------------------------
	assign Enable Feed Fw and Feed Bw
-------------------------------------------------------------------------------
*)

IF NOT(stHomingOptions.UseLimitMin) THEN
	fbAxis.FeedEnable_Negative := TRUE;
ELSIF stHomingOptions.HomeOnLimitMin AND fbAxis.pAxisRef^.NcToPlc.HomingState > 0 THEN	
	fbAxis.FeedEnable_Negative := TRUE;
ELSE	
	fbAxis.FeedEnable_Negative := NOT(bLimitMin XOR stHomingOptions.InvertLimitMin);
END_IF

IF NOT(stHomingOptions.UseLimitMax) THEN
	fbAxis.FeedEnable_Positive := TRUE;
ELSIF stHomingOptions.HomeOnLimitMax AND fbAxis.pAxisRef^.NcToPlc.HomingState > 0 THEN	
	fbAxis.FeedEnable_Positive := TRUE;
ELSE	
	fbAxis.FeedEnable_Positive := NOT(bLimitMax XOR stHomingOptions.InvertLimitMax);
END_IF

bFastStop                   := stCtrl.bFastStop;

IF NOT bInit
THEN
	RETURN;
END_IF

(*
-------------------------------------------------------------------------------
	get axis function from interface
-------------------------------------------------------------------------------
*)
stState.bError	            := fbAxis.pAxisRef^.Status.Error; // forward error bit from Axis

eState := stCtrl.uiAxisFunctionReq;

IF (eState <> eStateOld) OR
   (eState = 0)
THEN
  fbAxis.Clear();
  stState.byAxisFuncPara    := 0; // clear mirrored value from ctrl

  stState.bReady            := FALSE;
  stState.bBusy             := FALSE;
  stState.bError            := FALSE;

  eStateExec	              := eState; // clear execution state for logging
  stState.uiErrorId	        := 0;
  stMsg.sText               := '';

  uiState := uiStateSS1     := 0; // reset SS1 state when safety input is back
END_IF


(*
-------------------------------------------------------------------------------
	- get axis SS1 stop
  - else, regular use of axis
-------------------------------------------------------------------------------
*)
IF NOT bSS1
THEN
  // SS1 stop use only
  Axis_Stop_SS1();

  CASE eState OF

    e_AxisFunction.AXIS_DISABLE:
      Axis_Disable();

    e_AxisFunction.AXIS_RESET:
      Axis_Reset_SS1();

    e_AxisFunction.AXIS_PARAMETER:
      Axis_Parameter();

    e_AxisFunction.AXIS_GEAR_OUT:
      Axis_Gear_Out();

  END_CASE

ELSE

  // regular use
  CASE eState OF
  
    e_AxisFunction.AXIS_DISABLE:
      Axis_Disable();
  
    e_AxisFunction.AXIS_IDLE:
      stState.bReady := NOT fbAxis.pAxisRef^.Status.Error AND 
                        fbAxis.pAxisRef^.Status.ControlLoopClosed;
      Axis_Idle();
  
    e_AxisFunction.AXIS_ENABLE:
      Axis_Enable();  
  
    e_AxisFunction.AXIS_HOME:
      Axis_Home();
  
    e_AxisFunction.AXIS_MOVE_POS:
      Axis_Move_Pos();
  
    e_AxisFunction.AXIS_MOVE_VELO:
      Axis_Move_Velo();
  
    e_AxisFunction.AXIS_RESET:
      Axis_Reset();
  
    e_AxisFunction.AXIS_HALT:
      Axis_Halt();
  
    e_AxisFunction.AXIS_STOP:
      Axis_Stop();
  
    e_AxisFunction.AXIS_MOVE_BUFFER:
      Axis_Move_Buffer();

    e_AxisFunction.AXIS_MOVE_BUFFER_VELO:
      Axis_Move_Buffer_Velocity();
  
    e_AxisFunction.AXIS_PARAMETER:
      Axis_Parameter();
  
    e_AxisFunction.AXIS_GEAR_IN:
      Axis_Gear_In();
  
    e_AxisFunction.AXIS_GEAR_OUT:
      Axis_Gear_Out();
  
    e_AxisFunction.AXIS_GEAR_IN_MULTIMASTER:
      Axis_Gear_In_Multimaster();
  
  ELSE
    // axis function is not available
    stState.bReady          := FALSE;
    stState.bBusy           := FALSE;
    eStateActive 	          := eState + e_AxisFunction.ERROR;
    eStateExec		          := e_AxisFunction.ERROR;
    stState.bError          := TRUE;
    stState.uiErrorId       := 9999;
  END_CASE
  
  (*
  -------------------------------------------------------------------------------
    Xenax drive homing
  -------------------------------------------------------------------------------
  *)
  IF bXenaxDrive
  THEN
    fbXenaxHoming(
      bExecute:= , 
      bAbort:= , 
      Axis:= fbAxis.pAxisRef^, 
      Done=> , 
      Busy=> , 
      Error=> , 
      ErrorId=> );
  END_IF
END_IF // bSS1 = true


(*
-------------------------------------------------------------------------------
	Output Data
-------------------------------------------------------------------------------
*)
// Check CopntrolLoop
IF fbAxis.pAxisRef^.Status.ControlLoopClosed
THEN
  stState.bEnabled          := TRUE;
ELSE
  stState.bEnabled          := FALSE;
END_IF

stState.bStandstill         := fbAxis.pAxisRef^.Status.NotMoving;

// HAUD
// 2023_05_26
// REAL datatype change to LREAL
stState.rActPos             := (fbAxis.pAxisRef^.NcToPlc.ActPos);
stState.rActVelo            := (fbAxis.pAxisRef^.NcToPlc.ActVelo);
stState.rPosDiff            := (fbAxis.pAxisRef^.NcToPlc.PosDiff);

IF (stState.rActPos < stCtrl.rSetPos + fbAxis.stTargetPositionWindow.fValue) AND
   (stState.rActPos > stCtrl.rSetPos - fbAxis.stTargetPositionWindow.fValue) AND
    stState.bStandstill
THEN
  stState.bInTarget         := TRUE;
ELSE
  stState.bInTarget         := FALSE;
END_IF

stState.uiAxisFunctionState := eStateActive;

// HAUD
// 2023 04 05
// copy CoupleState from axis
stState.dwCoupleState       := fbAxis.pAxisRef^.NcToPlc.CoupleState;

sState                      := TO_STRING(eState);
sStateExec                  := TO_STRING(eStateExec);

IF (eStateOld <> eState) AND bInit
THEN
  sStateOld                 := TO_STRING(eStateOld);
  stMsg.eType               := E_MessageType.eMessageInfo;
  stMsg.eDevice             := E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
  stMsg.eSubdevice          := e_Subdevice.AxisMode;
  stMsg.iErrorNumber        := fbAxis.pAxisRef^.NcToPlc.AxisId;
  stMsg.sText               := 'change ';
  stMsg.sText               := Tc2_Standard.CONCAT(stMsg.sText, sStateOld);
  stMsg.sText               := Tc2_Standard.CONCAT(stMsg.sText, ' to ');
  stMsg.sText               := Tc2_Standard.CONCAT(stMsg.sText, sState);
  f_MessageSet(stMsg);
END_IF

IF (eStateExecOld <> eStateExec) AND bInit
THEN
  stMsg.eType               := E_MessageType.eMessageInfo;
  stMsg.eDevice             := E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
  stMsg.eSubdevice          := e_Subdevice.AxisMode;
  stMsg.iErrorNumber        := fbAxis.pAxisRef^.NcToPlc.AxisId;
  stMsg.sText               := Tc2_Standard.CONCAT(sState, ' function: ');
  stMsg.sText               := Tc2_Standard.CONCAT(stMsg.sText, TO_STRING(eStateExec));
  f_MessageSet(stMsg);
END_IF

eStateOld                   := eState;
eStateExecOld               := eStateExec;


]]></ST>
    </Implementation>
    <Action Name="Axis_Cam_In" Id="{c09c718b-d6c5-4e83-abb4-a1831c74941f}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    IF (_pAxis1 <> 0)
    THEN
      fbCamIn(Master        := _pAxis1^, 
              Slave         := fbAxis.pAxisRef^, 
              Execute       := FALSE);
 
      uiState               := 1;

    ELSE
      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := e_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice      := e_Subdevice.fbCamIn;
      stMsg.iErrorNumber    := 666;
      stMsg.sText           := 'Pointer to Masteraxis null';

      f_MessageSet(stMsg);
      stState.uiErrorId		  := TO_UDINT(stMsg.iErrorNumber);

      uiState               :=99;
    END_IF
END_CASE
CASE uiState OF
  1:
  IF NOT (_pAxis1^.Status.Error)
	THEN
		uiState				:= 10;
	ELSE
		mcResetMaster(
					Axis:= _pAxis1^, 
					Execute:= FALSE);
		uiState				:= 2;
	END_IF
END_CASE
CASE uiState OF
  2:
		mcResetMaster(
				Axis:= _pAxis1^, 
				Execute:= TRUE);
	IF mcResetMaster.Done
	THEN
		uiState				:= 0;
	END_IF
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    fbCamIn(Master          := _pAxis1^, 
            Slave           := fbAxis.pAxisRef^, 
            Execute         := TRUE,
            MasterOffset    := _stCamIn.MasterOffset,
            SlaveOffset     := _stCamIn.SlaveOffset,
            MasterScaling   := _stCamIn.MasterScaling,
            SlaveScaling    := _stCamIn.SlaveScaling,
            StartMode       := _stCamIn.StartMode,
            CamTableID      :=_StCamIn.CamTableID);

    IF NOT fbCamIn.Error
    THEN
      IF fbCamIn.InSync
      THEN
        fbCamIn(Master      := _pAxis1^, 
                Slave       := fbAxis._AxisRef, 
                Execute     := FALSE);

        uiState             := 20;
      END_IF
    ELSE
      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := e_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice      := e_Subdevice.fbCamIn;
      stMsg.iErrorNumber    := fbCamIn.ErrorID;
      stMsg.sText           := SEL((_bCamming), 'function not activated with Compiler def CAM', 'error while cam in');

      f_MessageSet(stMsg);

      stState.uiErrorId		  := fbCamIn.ErrorID;

      fbCamIn(Master        := _pAxis1^, 
              Slave         := fbAxis.pAxisRef^, 
              Execute       := FALSE);

      uiState               := 99;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Cam_Out" Id="{267f06b5-3cf0-4bdf-8da7-d49bfb512cc4}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    fbCamOut(Slave          := fbAxis.pAxisRef^, 
             Execute        := FALSE);

    stMsg.eType 				    := E_MessageType.eMessageInfo;
    stMsg.eDevice 			    := E_Device.Axis  + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
    stMsg.eSubdevice 		    := e_Subdevice.fbCamOut;
    stMsg.iErrorNumber 	    := fbAxis.pAxisRef^.NcToPlc.AxisId;
    stMsg.sText					    := concat('Start CamOut ',TO_STRING(fbAxis.pAxisRef^.NcToPlc.CoupleState));
    f_MessageSet(stMsg);

    // HAUD 2023 04 05
    IF fbAxis.pAxisRef^.Status.Coupled
    THEN
      uiState               := 10;
    ELSE
      uiState               := 20;
      stMsg.eType 				  := E_MessageType.eMessageInfo;
      stMsg.eDevice 			  := E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
      stMsg.eSubdevice 		  := e_Subdevice.fbCamOut;
      stMsg.iErrorNumber 	  := 0;
      stMsg.sText           := 'Axis not coupled, ignore function ';
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    fbCamOut(Slave          := fbAxis.pAxisRef^, 
             Execute        := TRUE);

    IF fbCamOut.Error
    THEN
      // HAUD 2023 03 31
      IF NOT fbAxis.pAxisRef^.Status.Coupled
      THEN
        uiState             := 20;
        stMsg.eType 				:= E_MessageType.eMessageWarn;
        stMsg.eDevice 			:= E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
        stMsg.eSubdevice 		:= e_Subdevice.fbCamOut;
        stMsg.iErrorNumber 	:= fbCamOut.ErrorID;
        stMsg.sText         := 'Axis not coupled, ignore fb_CamOut error ';
        f_MessageSet(stMsg);

        fbCamOut(Slave      := fbAxis.pAxisRef^, 
                 Execute    := FALSE);
      ELSE
        uiState             := 0;
        // ignore error if axis is coupled; retry      
        stMsg.eType 				:= E_MessageType.eMessageWarn;
        stMsg.eDevice 			:= E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
        stMsg.eSubdevice 		:= e_Subdevice.fbCamOut;
        stMsg.iErrorNumber 	:= fbCamOut.ErrorID;
        stMsg.sText         := 'Axis coupled, retry ';
        f_MessageSet(stMsg);
      END_IF
    ELSIF fbCamOut.Done
    THEN
      stMsg.eType 				  := E_MessageType.eMessageInfo;
      stMsg.eDevice 			  := E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
      stMsg.eSubdevice 		  := e_Subdevice.fbCamOut;
      stMsg.iErrorNumber 	  := 0;
      stMsg.sText					  := 'fbCamOutDone ';

      f_MessageSet(stMsg);

      uiState               := 20;

      fbCamOut(Slave        := fbAxis.pAxisRef^, 
               Execute      := FALSE);

    ELSIF NOT fbAxis.pAxisRef^.Status.Coupled
    THEN
      stMsg.eType 				  := E_MessageType.eMessageInfo;
      stMsg.eDevice 			  := E_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);;
      stMsg.eSubdevice 		  := e_Subdevice.fbCamOut;
      stMsg.iErrorNumber 	  := 0;
      stMsg.sText					  := 'AxisRef not coupled ';

      f_MessageSet(stMsg);

      uiState               := 20;

      fbCamOut(Slave        := fbAxis.pAxisRef^, 
               Execute      := FALSE);
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Disable" Id="{b447e5f3-8d66-400c-acdb-9c2ddb2857aa}">
      <Implementation>
        <ST><![CDATA[

eStateActive            := eState;
eStateExec	            := e_AxisFunction.AXIS_BUSY;

tonTimeout(IN           :=FALSE, 
           PT           := tUpdate);

fbAxis.Enable 		      := FALSE;
stState.bTimeout 	      := FALSE;

IF NOT fbAxis.pAxisRef^.Status.ControlLoopClosed
THEN
  eStateActive          := eState + e_AxisFunction.AXIS_DONE;
  eStateExec	          := e_AxisFunction.AXIS_DONE;
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Enable" Id="{c092ea78-5cf9-4c95-8647-dd752b109a73}">
      <Implementation>
        <ST><![CDATA[
stState.bBusy               := TRUE;
eStateActive                := eState + e_AxisFunction.AXIS_BUSY;
eStateExec	                := e_AxisFunction.AXIS_BUSY;

tonTimeout(IN               := TRUE, 
           PT               := tUpdate);

fbAxis.Enable               := TRUE;

// check if Axis is active
IF fbAxis.pAxisRef^.Status.ControlLoopClosed
THEN
  stState.bTimeout          := FALSE;

  tonTimeout(IN             := FALSE);

  uiState                   := 20;

ELSIF tonTimeout.Q
THEN
  stState.bTimeout          := TRUE;
  stState.uiErrorId         := fbAxis.pAxisRef^.NcToPlc.ErrorCode;

  tonTimeout(IN             := FALSE);

  fbAxis.Enable             := FALSE;

  uiState                   := 99;
END_IF

CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;

    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Gear_In" Id="{6ab39f6a-62b8-4034-86ed-192803b922c5}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;

    IF (_pAxis1 <> 0)
    THEN
      fbGearIn(Master       := _pAxis1^, 
               Slave        := fbAxis.pAxisRef^, 
               Execute      := FALSE);
 
        uiState             := 10;

    ELSE
      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := e_Device.Axis + TO_INT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice      := e_Subdevice.fbGearIn;
      stMsg.iErrorNumber    := 666;
      stMsg.sText           := 'Pointer to Masteraxis null';
      f_MessageSet(stMsg);

      stState.uiErrorId		  := TO_UDINT(stMsg.iErrorNumber);

      uiState               :=99;
    END_IF
    
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    fbGearIn(Master         := _pAxis1^, 
             Slave          := fbAxis.pAxisRef^, 
             Execute        := TRUE,
             RatioNumerator := _stGearIn.RatioNumerator, 
             RatioDenominator:= _stGearIn.RatioDenominator, 
             Acceleration   := _stGearIn.Acceleration, 
             Deceleration   := _stGearIn.Deceleration, 
             Jerk           := _stGearIn.Jerk);

    IF NOT fbGearIn.Error
    THEN
      IF fbGearIn.InGear
      THEN
        fbGearIn(Master     := _pAxis1^, 
                 Slave      := fbAxis._AxisRef, 
                 Execute    := FALSE);

        uiState             := 20;
      END_IF
    ELSE
      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := e_Device.Axis + TO_INT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice      := e_Subdevice.fbGearIn;
      stMsg.iErrorNumber    := fbGearIn.ErrorID;
      stMsg.sText           := 'error while gear in';
      f_MessageSet(stMsg);

      stState.uiErrorId		  := TO_UDINT(stMsg.iErrorNumber);

      fbGearIn(Master       := _pAxis1^, 
               Slave        := fbAxis.pAxisRef^, 
               Execute      := FALSE);

      uiState               := 99;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Gear_In_Multimaster" Id="{c2c162d3-6a86-4a32-bfba-9a62f9727706}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive                      := eState;
    stState.bBusy                     := TRUE;
    stState.bReady                    := FALSE;

    IF (_pAxis1 <> 0) AND 
       (_pAxis2 <> 0) AND 
       (_pAxis3 <> 0)
    THEN
      fbGearInMultiMaster(Master1     := _pAxis1^,
                          Master2     := _pAxis2^,
                          Master3     := _pAxis3^,
                          Master4     := st_AxisREF_Dummy,//_pAxis4^,
                          Slave       := fbAxis.pAxisRef^,
                          Enable      := FALSE);

      uiState                         := 10;
    ELSE
      stMsg.eType                     := E_MessageType.eMessageError;
      stMsg.eDevice                   := e_Device.Axis + TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice                := e_Subdevice.fbGearInMultiMaster;
      stMsg.iErrorNumber              := 666;
      stMsg.sText                     := 'Pointer to Master axis null';

      f_MessageSet(stMsg);

      stState.uiErrorId		            := TO_UDINT(stMsg.iErrorNumber);

      uiState                         := 99;
    END_IF
    
END_CASE
CASE uiState OF
  10:
    eStateActive                      := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	                      := e_AxisFunction.AXIS_BUSY;

    fbGearInMultiMaster(Master1       := _pAxis1^,
                        Master2       := _pAxis2^,
                        Master3       := _pAxis3^,
                        Master4       := st_AxisREF_Dummy,//_pAxis4^,
                        Slave         := fbAxis.pAxisRef^,
                        Enable        := TRUE,
                        GearRatio1    := _stGearInMultiMaster.GearRatio1,
                        GearRatio2    := _stGearInMultiMaster.GearRatio2,
                        GearRatio3    := _stGearInMultiMaster.GearRatio3,
                        GearRatio4    := _stGearInMultiMaster.GearRatio4,
                        Acceleration  := _stGearInMultiMaster.Acceleration, 
                        Deceleration  := _stGearInMultiMaster.Deceleration, 
                        Jerk          := _stGearInMultiMaster.Jerk);

    IF NOT fbGearInMultiMaster.Error
    THEN
      IF fbGearInMultiMaster.InGear
      THEN
        fbGearInMultiMaster(Master1   := _pAxis1^,
                            Master2   := _pAxis2^,
                            Master3   := _pAxis3^,
                            Master4   := st_AxisREF_Dummy,//_pAxis4^,
                            Slave     := fbAxis.pAxisRef^,
                            Enable    := FALSE);

        uiState                       := 20;
      END_IF
    ELSE
      stMsg.eType                     := E_MessageType.eMessageError;
      stMsg.eDevice                   := e_Device.Axis + UDINT_TO_DINT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice                := e_Subdevice.fbGearIn;
      stMsg.iErrorNumber              := fbGearIn.ErrorID;
      stMsg.sText                     := 'error while gear in';
      f_MessageSet(stMsg);

      stState.uiErrorId		            := TO_UDINT(stMsg.iErrorNumber);
  
      fbGearInMultiMaster(Master1     := _pAxis1^,
                          Master2     := _pAxis2^,
                          Master3     := _pAxis3^,
                          Master4     := st_AxisREF_Dummy,//_pAxis4^,
                          Slave       := fbAxis.pAxisRef^,
                          Enable      := FALSE);
      uiState := 99;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy                     := FALSE;
    eStateActive                      := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	                      := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError                    := TRUE;
    stState.bBusy                     := FALSE;
    eStateActive                      := eState + e_AxisFunction.ERROR;
    eStateExec	                      := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Gear_Out" Id="{36257606-f297-46ce-af2c-d0ccd08d3780}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;

    fbGearOut(Slave         := fbAxis.pAxisRef^, 
              Execute       := FALSE);

    IF NOT fbAxis.pAxisRef^.Status.Coupled
    THEN
      uiState               := 20;
    ELSE
      uiState               := 10;
    END_IF
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    fbGearOut(Slave         := fbAxis.pAxisRef^, 
              Execute       := TRUE);

    IF fbGearOut.Error
    THEN
      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := e_Device.Axis + TO_INT(fbAxis.pAxisRef^.NcToPlc.AxisId);
      stMsg.eSubdevice      := e_Subdevice.fbGearIn;
      stMsg.iErrorNumber    := fbGearOut.ErrorID;
      stMsg.sText           := 'error while gear out';
      f_MessageSet(stMsg);

      stState.uiErrorId		  := TO_UDINT(stMsg.iErrorNumber);

      fbGearOut(Slave       := fbAxis.pAxisRef^, 
                Execute     := FALSE);

      uiState               := 90;

    ELSIF NOT fbAxis.pAxisRef^.Status.Coupled
    THEN
      fbGearOut(Slave       := fbAxis.pAxisRef^, 
                Execute     := FALSE);

      uiState               := 20;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Halt" Id="{feefc233-3909-4974-9039-2e12e8088ec3}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    stMcOut                 := fbAxis.Halt(Execute        := FALSE,
                                           Deceleration	  := stCtrl.rDec, 
                                           Jerk					  := 100_000.0, 
                                           BufferMode		  := Tc2_MC2.MC_BufferMode.MC_Aborting);
    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.Halt(Execute        := TRUE,
                                           Deceleration	  := stCtrl.rDec, 
                                           Jerk					  := 100_000.0, 
                                           BufferMode		  := Tc2_MC2.MC_BufferMode.MC_Aborting);

    IF NOT stMcOut.Busy
    THEN
      IF stMcOut.Error
      THEN
        stState.uiErrorId		:= stMcOut.ErrorID;

        uiState             := 99;
  
      ELSIF stMcOut.Done
      THEN
        uiState             := 20;
      END_IF
      fbAxis.Halt(Execute         := FALSE,
                  Deceleration	  := stCtrl.rDec, 
                  Jerk					  := 100_000.0, 
                  BufferMode		  := Tc2_MC2.MC_BufferMode.MC_Aborting);
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec		          := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Home" Id="{8c5e6c46-9823-46ac-8f8a-17f52bfd38a5}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;

    stMcOut                 := fbAxis.Home(Execute    := FALSE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= Tc2_MC2.MC_HomingMode.MC_ResetCalibration, 
                                           Options		:= stHomingOptions.Options);
    IF NOT bXenaxDrive
    THEN
      IF fbAxis.pAxisRef^.Status.Homed
      THEN
        uiState             := 10;
      ELSE
        uiState             := 15;
      END_IF
    ELSE
      uiState               := 100;
    END_IF
END_CASE
CASE uiState OF
  10:
    // always reset calibration to force a homing run of the axis
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stState.bReferenced     := FALSE;

    stMcOut                 := fbAxis.Home(Execute    := TRUE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= Tc2_MC2.MC_HomingMode.MC_ResetCalibration, 
                                           Options		:= stHomingOptions.Options);
    IF stMcOut.Done
    THEN
      stMcOut               := fbAxis.Home(Execute    := FALSE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= stHomingOptions.HomingMode, 
                                           Options		:= stHomingOptions.Options);

      IF (stHomingOptions.HomingMode = Tc2_MC2.MC_HomingMode.MC_Absolute)
      THEN
        uiState             := 20;
      ELSE
        uiState             := 15;	
      END_IF
    END_IF
END_CASE
CASE uiState OF
  15:
    stMcOut                 := fbAxis.Home(Execute    := TRUE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= stHomingOptions.HomingMode, 
                                           Options		:= stHomingOptions.Options);

    IF stMcOut.Done
    THEN
      stState.bReferenced   := fbAxis.pAxisRef^.Status.Homed;

      stMcOut               := fbAxis.Home(Execute    := FALSE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= stHomingOptions.HomingMode, 
                                           Options		:= stHomingOptions.Options);
      uiState               := 20;

    ELSIF stMcOut.Error
    THEN
      stState.uiErrorId		  := stMcOut.ErrorID;
      stMcOut               := fbAxis.Home(Execute    := FALSE,
                                           Position		:= stHomingOptions.Position, 
                                           HomingMode	:= stHomingOptions.HomingMode, 
                                           Options		:= stHomingOptions.Options);
      uiState               := 99;
    END_IF

  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
CASE uiState OF
  // Xenax drive homing
  100:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    stState.bReferenced 		:= FALSE;
    fbXenaxHoming.bExecute 	:= FALSE;

    uiState                 := 110;
END_CASE
CASE uiState OF
  110:
    fbXenaxHoming.bExecute  := TRUE;
    uiState                 := 120;

  120:
    IF fbXenaxHoming.Error
    THEN
      stState.uiErrorId     := fbXenaxHoming.ErrorId;
      uiState               := 99;

    ELSIF fbXenaxHoming.Done
    THEN
      stState.bReferenced 	:= TRUE;
      fbXenaxHoming.bExecute:= FALSE;

      uiState               := 20;
    END_IF
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Idle" Id="{72343d57-e88d-4320-95ee-4744536c7941}">
      <Implementation>
        <ST><![CDATA[IF stState.bReady
THEN
  IF NOT fbAxis.pAxisRef^.Status.Error
  THEN
    stState.bError  := FALSE;
  END_IF
  eStateActive      := eState;
  eStateExec	      := e_AxisFunction.AXIS_DONE;
END_IF

IF NOT stState.bReady
THEN
  eStateActive := eState;
  eStateExec	 := e_AxisFunction.AXIS_BUSY;
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Init" Id="{c283b5a7-677f-4b34-91de-8016646f33a5}">
      <Implementation>
        <ST><![CDATA[(*
-------------------------------------------------------------------------------
	INIT 
  - check for fbAxis to startUp --> sAxisName chec
  - check for fbAxis StartUpError --> Axis_Reset() and try again

  - get encodertype and set output bSercosAxis
	- get Axis Params from NC
	- get manufacturer device name for detecting use of Xenax drive

-------------------------------------------------------------------------------
*)
CASE uiInitState OF

  0:
  stState.bError          := FALSE;
  isizeOut                := SIZEOF(stState);
  iSizeIn	                := SIZEOF(stCtrl);
  bSercosAxis             := FALSE;
  sAxisName               := fbAxis.NcAxisName;

  IF fbAxis.StartUpDone
  THEN
    stMsg.eType 				  := E_MessageType.eMessageInfo;
    stMsg.eDevice 			  := E_Device.Axis;
    stMsg.eSubdevice 		  := e_Subdevice.General;
    stMsg.iErrorNumber 	  := fbAxis.pAxisRef^.NcToPlc.AxisId;
    stMsg.sText					  := 'Init: ';
    stMsg.sText					  := Tc2_Standard.CONCAT(stMsg.sText, sAxisName);
    f_MessageSet(stMsg);

    uiInitState           := 40;
    bXenaxDrive				    := FALSE;
    bSercosAxis           := FALSE;

    fbCoeRead(Execute	    := FALSE,
              NetId       := fbAxis.pAxisRef^.ADS.NetId, 
              Axis        := fbAxis.pAxisRef^);

    IF (fbAxis.EncoderType <> 1)
    THEN
      uiInitState         := 10;
    END_IF

  ELSE
    IF (stMsg.sText <> 'startup')
    THEN
      stMsg.eType 				:= E_MessageType.eMessageInfo;
      stMsg.eDevice 			:= E_Device.Axis;
      stMsg.eSubdevice 		:= e_Subdevice.General;
      stMsg.iErrorNumber 	:= fbAxis.pAxisRef^.NcToPlc.AxisId;
      stMsg.sText					:= 'startup';
      f_MessageSet(stMsg);
    END_IF

    IF (fbAxis.StartUpError)
    THEN
      stMsg.eType 				:= E_MessageType.eMessageError;
      stMsg.eDevice 			:= E_Device.Axis;
      stMsg.eSubdevice 		:= e_Subdevice.General;
      stMsg.iErrorNumber 	:= fbAxis.pAxisRef^.NcToPlc.AxisId;
      stMsg.sText					:= 'InitError: ';

      f_MessageSet(stMsg);

      uiInitState         := 90;
    END_IF
  END_IF

  10:
    // get manufacturer device name in CoE
    fbCoeRead.Index 		  := 16#1008;
    fbCoeRead.SubIndex 	  := 0;
    fbCoeRead.pDstBuf		  := ADR(sDriveType);
    fbCoeRead.BufLen		  := SIZEOF(sDriveType);

    fbCoeRead(Execute	    := TRUE,
              NetId       := fbAxis.pAxisRef^.ADS.NetId, 
              Axis        := fbAxis.pAxisRef^);

    IF fbCoeRead.Busy
    THEN
      uiInitState         := 20;
    END_IF

  20:
    fbCoeRead(
              NetId       := fbAxis.pAxisRef^.ADS.NetId, 
              Axis        := fbAxis.pAxisRef^);

    IF (fbCoeRead.Error)
    THEN
      uiInitState         := 90;

    ELSIF NOT fbCoeRead.Busy
    THEN
      stState.bError 		  := FALSE;
      stState.uiErrorId   := 0;
      uiInitState         := 30;
    END_IF

  30:
    IF (fbAxis.EncoderType = 8) OR
       (fbAxis.EncoderType = 9)
    THEN
      bSercosAxis         := TRUE;

      stMsg.eType 				:= E_MessageType.eMessageInfo;
      stMsg.eDevice 			:= E_Device.Axis;
      stMsg.eSubdevice 		:= e_Subdevice.General;
      stMsg.iErrorNumber 	:= fbAxis.pAxisRef^.NcToPlc.AxisId;
      stMsg.sText					:= Tc2_Standard.CONCAT(stMsg.sText,',');
      stMsg.sText					:= Tc2_Standard.CONCAT(stMsg.sText, 'SERCOS');
      f_MessageSet(stMsg);
    END_IF

    // check manufacturer device name for identifier string
    IF (FIND(sDriveType, sXenax) <> 0)
    THEN
      bXenaxDrive         := TRUE;

      stMsg.eType 				:= E_MessageType.eMessageInfo;
      stMsg.eDevice 			:= E_Device.Axis;
      stMsg.eSubdevice 		:= e_Subdevice.General;
      stMsg.iErrorNumber 	:= fbAxis.pAxisRef^.NcToPlc.AxisId;
      stMsg.sText					:= Tc2_Standard.CONCAT(stMsg.sText,',');
      stMsg.sText					:= Tc2_Standard.CONCAT(stMsg.sText,sXenax);
      f_MessageSet(stMsg);
    END_IF
    uiInitState           := 40;

  40:
    eStateExec	          := e_AxisFunction.AXIS_DONE;
    eStateExecOld         := e_AxisFunction.AXIS_DONE;
    stMsg.eType 				  := E_MessageType.eMessageInfo;
    stMsg.eDevice 			  := E_Device.Axis;
    stMsg.eSubdevice 		  := e_Subdevice.General;
    stMsg.iErrorNumber 	  := fbAxis.pAxisRef^.NcToPlc.AxisId;
    stMsg.sText					  := Tc2_Standard.CONCAT(stMsg.sText, ': ');
    stMsg.sText					  := Tc2_Standard.CONCAT(stMsg.sText, TO_STRING(eStateExec));
    f_MessageSet(stMsg);
    uiInitState           := 100;

  90:
    stState.bError        := TRUE;
    uiState               := 0;
    uiInitState           := 91;

  91:
    Axis_Reset();
    IF (eStateExec = e_AxisFunction.AXIS_DONE)
    THEN
      stMsg.eType 				:= E_MessageType.eMessageInfo;
      stMsg.eDevice 			:= E_Device.Axis;
      stMsg.eSubdevice 		:= e_Subdevice.General;
      stMsg.iErrorNumber 	:= fbAxis.pAxisRef^.NcToPlc.AxisId;
      stMsg.sText					:= 'Init Axis_Reset: ';

      uiInitState         := 0;
    END_IF

  100:
    bInit                 := TRUE;
END_CASE

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Move_Buffer" Id="{507073c3-c0f6-4af4-a9ca-927f6fb738e1}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    stMcOut                 := fbAxis.MoveAbsolute(Enable       := FALSE,
                                                   Position		  := stCtrl.rSetPos, 
                                                   Velocity		  := stCtrl.rSetVelo, 
                                                   Acceleration := stCtrl.rAcc, 
                                                   Deceleration := stCtrl.rDec, 
                                                   Jerk				  := 0, 
                                                   BufferMode	  := stMotionOptions.eBufferMode);

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MoveAbsolute(Enable       := TRUE,
                                                   Position     := stCtrl.rSetPos, 
                                                   Velocity     := stCtrl.rSetVelo, 
                                                   Acceleration := stCtrl.rAcc, 
                                                   Deceleration := stCtrl.rDec, 
                                                   Jerk         := 0, 
                                                   BufferMode   := stMotionOptions.eBufferMode);

    IF stMcOut.Error
    THEN
      stState.uiErrorId     := stMcOut.ErrorID;
      uiState               := 99;

      stMcOut               := fbAxis.MoveAbsolute(Enable     := FALSE,
                                                   Position		  := stCtrl.rSetPos, 
                                                   Velocity		  := stCtrl.rSetVelo, 
                                                   Acceleration := stCtrl.rAcc, 
                                                   Deceleration := stCtrl.rDec, 
                                                   Jerk				  := 0, 
                                                   BufferMode	  := stMotionOptions.eBufferMode);

    END_IF
END_CASE
CASE uiState OF
  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Move_Buffer_Velocity" Id="{24f67fc2-6be2-086f-2261-75c4eafc8020}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;
    uiState                 := 5;
END_CASE

CASE uiState OF
  5:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MoveVelocity(FALSE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);
    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MoveVelocity(TRUE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

    IF stMcOut.Error
    THEN
      stMcOut               := fbAxis.MoveVelocity(FALSE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

      stState.uiErrorId		  := stMcOut.ErrorID;

      uiState               := 99;
    END_IF
END_CASE

CASE uiState OF
  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Move_Pos" Id="{b74201d9-1386-42b3-92a8-126851641a42}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;

    rSetPos                 := stCtrl.rSetPos;
    stMcOut                 := fbAxis.MovePtP(Execute     := FALSE,
                                              Position		:= rSetPos, 
                                              Velocity		:= stCtrl.rSetVelo, 
                                              Acceleration:= stCtrl.rAcc, 
                                              Deceleration:= stCtrl.rDec, 
                                              Jerk				:= 0);

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MovePtP(Execute     := TRUE,
                                              Position		:= rSetPos, 
                                              Velocity		:= stCtrl.rSetVelo, 
                                              Acceleration:= stCtrl.rAcc, 
                                              Deceleration:= stCtrl.rDec, 
                                              Jerk				:= 0); //default

    IF stMcOut.Done OR 
       stMcOut.Error
    THEN
      IF stMcOut.Done
      THEN
        uiState             := 11;
      END_IF
      IF stMcOut.Error
      THEN
        stState.uiErrorId		:= stMcOut.ErrorID;
        uiState             := 99;
      END_IF

      stMcOut               := fbAxis.MovePtP(Execute     := FALSE,
                                              Position		:= rSetPos, 
                                              Velocity		:= stCtrl.rSetVelo, 
                                              Acceleration:= stCtrl.rAcc, 
                                              Deceleration:= stCtrl.rDec, 
                                              Jerk				:= 0);
    END_IF
END_CASE
CASE uiState OF
  11:
    IF stState.bInTarget
    THEN
      uiState               := 20;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec              := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Move_Velo" Id="{0718d527-0d07-497c-9f71-df617c77357e}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;
    uiState := 5;
END_CASE

CASE uiState OF
  5:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MoveVelocity(FALSE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.MoveVelocity(TRUE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

    IF stMcOut.Error
    THEN
      stMcOut               := fbAxis.MoveVelocity(FALSE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

      stState.uiErrorId     := stMcOut.ErrorID;

      uiState               := 99;

    ELSIF stMcOut.Done
    THEN
      stMcOut               := fbAxis.MoveVelocity(FALSE,
                                                   stCtrl.rSetVelo,
                                                   stCtrl.rAcc,
                                                   stCtrl.rDec,
                                                   100_000,
                                                   stCtrl.iDirection,
                                                   BufferMode := Tc2_MC2.MC_BufferMode.MC_Aborting);

      uiState               := 20;
    END_IF
END_CASE

CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec              := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Parameter" Id="{c92b333e-4ec8-4148-aa36-48920d48481f}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;

    tonWaitSeq(IN           := FALSE);

    IF stNcParameter.bRead
    THEN
      stState.bBusy         := TRUE;
      stMcOut               := fbAxis.ReadParameter(FALSE,stNcParameter.ParameterNumber);
      uiState               := 10;

    ELSIF stNcParameter.bWrite
    THEN
      stState.bBusy         := TRUE;
      stMcOut               := fbAxis.WriteParameter(FALSE, stNcParameter.ParameterNumber, stNcParameter.rValueWrite);
      uiState               := 11;
    END_IF

  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;

    tonWaitSeq(IN           := TRUE, 
               PT           := T#50MS);

    stMcOut                 := fbAxis.ReadParameter(TRUE,stNcParameter.ParameterNumber);

    IF stMcOut.Done AND 
       tonWaitSeq.Q
    THEN
      stNcParameter.rValueRead  := LREAL_TO_REAL(fbAxis.ReadParamValue);
      stMcOut                   := fbAxis.ReadParameter(FALSE,stNcParameter.ParameterNumber);

      uiState               := 20;
    END_IF

  11:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;

    tonWaitSeq(IN           := TRUE, 
               PT           := T#50MS);

    stMcOut                 := fbAxis.WriteParameter(TRUE, stNcParameter.ParameterNumber, stNcParameter.rValueWrite);

    IF stMcOut.Done AND 
       tonWaitSeq.Q
    THEN
      IF fbAxis.LocalParameterReload()
      THEN
        stMcOut             := fbAxis.WriteParameter(FALSE, stNcParameter.ParameterNumber, stNcParameter.rValueWrite);
        uiState             := 20;
      END_IF
    END_IF

  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Reset" Id="{83476c8e-c638-4679-a125-40563220fb44}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;
    stState.bTimeout        := FALSE;
    stMcOut                 := fbAxis.ErrorReset(FALSE);

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;
    stMcOut                 := fbAxis.ErrorReset(TRUE);

    IF stMcOut.Done
    THEN
      stState.bError        := FALSE;
      stState.uiErrorId     := 0;
      stMcOut               := fbAxis.ErrorReset(FALSE);
      uiState               := 20;

    ELSIF stMcOut.Error
    THEN
      stState.uiErrorId		  := stMcOut.ErrorID;
      uiState               := 99;
    END_IF
END_CASE
CASE uiState OF
  20:
    fbResetSercos(bExecute	:= FALSE);

    IF fbAxis.pAxisRef^.Status.DriveDeviceError AND
       bSercosAxis
    THEN
      tonTimeout(IN         := FALSE, 
                 PT         := tUpdate);

      uiState               := 30;
    ELSE
      uiState               := 40;
    END_IF

END_CASE
CASE uiState OF
  30:
    tonTimeout(IN           := TRUE, 
               PT           := tUpdate);

    fbResetSercos(bExecute	:= TRUE, 
                  p_AxisRef	:= ADR(fbAxis._AxisRef), stMcOutput=> );

    IF tonTimeout.Q
    THEN
      uiState               := 0;
    ELSE
      IF NOT fbAxis.pAxisRef^.Status.DriveDeviceError
      THEN
        tonTimeout(IN       := FALSE, 
                   PT       := tUpdate);

        uiState             := 40;
      END_IF
    END_IF
END_CASE
CASE uiState OF
  40:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;


  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec              := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Reset_SS1" Id="{503bd402-460e-079e-218c-3c31bbe05577}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;
    stState.bTimeout        := FALSE;
    stMcOut                 := fbAxis.ErrorReset(FALSE);

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;
    stMcOut                 := fbAxis.ErrorReset(TRUE);

    IF NOT stMcOut.Busy
    THEN
      stMcOut               := fbAxis.ErrorReset(FALSE);
      uiState               := 20;

    ELSIF stMcOut.Error
    THEN
      stState.uiErrorId		  := stMcOut.ErrorID;
      uiState               := 99;
    END_IF
END_CASE
CASE uiState OF
  20:
    fbResetSercos(bExecute	:= FALSE);

    IF fbAxis.pAxisRef^.Status.DriveDeviceError AND
       bSercosAxis
    THEN
      tonTimeout(IN         := FALSE, 
                 PT         := tUpdate);

      uiState               := 30;
    ELSE
      uiState               := 40;
    END_IF

END_CASE
CASE uiState OF
  30:
    tonTimeout(IN           := TRUE, 
               PT           := tUpdate);

    fbResetSercos(bExecute	:= TRUE, 
                  p_AxisRef	:= ADR(fbAxis._AxisRef), stMcOutput=> );

    IF tonTimeout.Q
    THEN
      uiState               := 0;
    ELSE
      IF NOT fbAxis.pAxisRef^.Status.DriveDeviceError
      THEN
        tonTimeout(IN       := FALSE, 
                   PT       := tUpdate);

        uiState             := 40;
      END_IF
    END_IF
END_CASE
CASE uiState OF
  40:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;


  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec              := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Stop" Id="{5618875b-cb18-48f5-94f8-15e2eeb99a77}">
      <Implementation>
        <ST><![CDATA[CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    stMcOut                 := fbAxis.Stop(FALSE);
    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec              := e_AxisFunction.AXIS_BUSY;

    stMcOut                 := fbAxis.Stop(TRUE);

    IF stMcOut.Error
    THEN
      stState.uiErrorId		  := stMcOut.ErrorID;
      stMcOut               := fbAxis.Stop(FALSE);
      uiState               := 99;

    ELSIF stMcOut.Done
    THEN
      stMcOut               := fbAxis.Stop(FALSE);
      uiState               := 20;
    END_IF
END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;

    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;

    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec              := e_AxisFunction.ERROR;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_Stop_SS1" Id="{af18b4bc-b698-4750-88a2-e33f930eee06}">
      <Implementation>
        <ST><![CDATA[
eStateActive                := e_AxisFunction.AXIS_SS1_STOP + e_AxisFunction.AXIS_BUSY;
eStateExec	                := e_AxisFunction.AXIS_BUSY;

stState.bBusy               := TRUE;
stState.bReady              := FALSE;

CASE uiStateSS1 OF
   0:
    IF fbAxis.Enable
    THEN
      uiStateSS1            := 10;
    ELSE
      uiStateSS1            := 100;
    END_IF
END_CASE
CASE uiStateSS1 OF
  10:
    fbAxis.Stop(FALSE);
    uiStateSS1              := 20;
END_CASE
CASE uiStateSS1 OF
  20:
    fbAxis.Stop(TRUE);
    IF fbAxis._AxisRef.Status.NotMoving
    THEN
      uiStateSS1            := 100;
    END_IF
END_CASE
CASE uiStateSS1 OF
  100:
    uiStateSS1              := 0;
    fbAxis.Enable           := FALSE;
    stState.bBusy           := FALSE;
    eStateActive            := e_AxisFunction.AXIS_SS1_STOP + e_AxisFunction.AXIS_DONE;
    eStateExec              := e_AxisFunction.AXIS_DONE;
END_CASE
]]></ST>
      </Implementation>
    </Action>
    <Action Name="Axis_WriteBufferMode" Id="{9be63008-0f37-470f-ad57-5ba93e4f1df0}">
      <Implementation>
        <ST><![CDATA[
CASE uiState OF
  0:
    eStateActive            := eState;
    stState.bBusy           := TRUE;
    stState.bReady          := FALSE;

    uiState                 := 10;
END_CASE
CASE uiState OF
  10:
    eStateActive            := eState + e_AxisFunction.AXIS_BUSY;
    eStateExec	            := e_AxisFunction.AXIS_BUSY;

END_CASE
CASE uiState OF
  20:
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.AXIS_DONE;
    eStateExec	            := e_AxisFunction.AXIS_DONE;

  99:
    stState.bError          := TRUE;
    stState.bBusy           := FALSE;
    eStateActive            := eState + e_AxisFunction.ERROR;
    eStateExec	            := e_AxisFunction.ERROR;
END_CASE

]]></ST>
      </Implementation>
    </Action>
    <Property Name="MasterAxis1" Id="{ce2889a6-95c0-0773-2ded-133de6d9863e}">
      <Declaration><![CDATA[PROPERTY MasterAxis1 : POINTER TO Tc2_MC2.AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{1e0e525d-6ebb-02ba-1db6-73a80414cdf3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterAxis1 := _pAxis1;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b81cdd7f-6804-0954-2d43-7f6342bcc98d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF MasterAxis1 = 0 THEN
	_pAxis1 := ADR(st_AxisREF_Dummy);
ELSE
	_pAxis1 := MasterAxis1;	
END_IF


]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MasterAxis2" Id="{11310f1f-6702-4d2c-8d7b-a2827342aae8}">
      <Declaration><![CDATA[PROPERTY MasterAxis2 : POINTER TO Tc2_MC2.AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{a81d360b-2ae5-4c06-8961-c90fd2906452}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterAxis2 := _pAxis2;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{a7cb66c7-7bae-423f-9aed-3006e1bbe229}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF MasterAxis2 = 0 THEN
	_pAxis2 := ADR(st_AxisREF_Dummy);
ELSE
	_pAxis2 := MasterAxis2;	
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MasterAxis3" Id="{0bae3dd7-d8fc-4a54-9d5a-73e3d513030c}">
      <Declaration><![CDATA[PROPERTY MasterAxis3 : POINTER TO Tc2_MC2.AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{c5a71c14-faca-487b-9974-47f13255ce9c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterAxis3 := _pAxis3;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c48e39b7-47d8-4319-bd09-79db6cc74c57}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF MasterAxis3 = 0 THEN
	_pAxis3 := ADR(st_AxisREF_Dummy);
ELSE
	_pAxis3 := MasterAxis3;	
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="MasterAxis4" Id="{613eddff-f147-4c65-ab51-9ffef4d29866}">
      <Declaration><![CDATA[PROPERTY MasterAxis4 : POINTER TO Tc2_MC2.AXIS_REF]]></Declaration>
      <Get Name="Get" Id="{db1bf231-28b9-4238-951e-e9c633ea892a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MasterAxis4 := _pAxis4;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9207c04f-aeed-4649-b57e-cfbdf77b79a3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF MasterAxis4 = 0 THEN
	_pAxis4 := ADR(st_AxisREF_Dummy);
ELSE
	_pAxis4 := MasterAxis4;	
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="StatusCompact" Id="{e1510941-1416-4f49-ae75-69b43fb0ba81}">
      <Declaration><![CDATA[PROPERTY PUBLIC StatusCompact : ST_AxisStatusCompact]]></Declaration>
      <Get Name="Get" Id="{7037a06e-1aaf-485e-abc1-e4765719a709}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[

_stStatusCompact.Error                := fbAxis.pAxisRef^.Status.Error;
(* PLCopen motion control statemachine states: *)
_stStatusCompact.ErrorStop            := fbAxis.pAxisRef^.Status.ErrorStop;
_stStatusCompact.Disabled             := fbAxis.pAxisRef^.Status.Disabled;
_stStatusCompact.Stopping             := fbAxis.pAxisRef^.Status.Stopping;

_stStatusCompact.StandStill           := fbAxis.pAxisRef^.Status.StandStill;
_stStatusCompact.DiscreteMotion       := fbAxis.pAxisRef^.Status.DiscreteMotion;
_stStatusCompact.ContinuousMotion     := fbAxis.pAxisRef^.Status.ContinuousMotion; 
_stStatusCompact.SynchronizedMotion   := fbAxis.pAxisRef^.Status.SynchronizedMotion;

_stStatusCompact.Homing               := fbAxis.pAxisRef^.Status.Homing;

(* additional status - (PLCopen definition)*)
_stStatusCompact.ConstantVelocity     := fbAxis.pAxisRef^.Status.ConstantVelocity; 
_stStatusCompact.Accelerating         := fbAxis.pAxisRef^.Status.Accelerating;
_stStatusCompact.Decelerating         := fbAxis.pAxisRef^.Status.Decelerating;

(* Axis.NcToPlc.StateDWord *)
_stStatusCompact.Operational          := fbAxis.pAxisRef^.Status.Operational; 
_stStatusCompact.ControlLoopClosed    := fbAxis.pAxisRef^.Status.ControlLoopClosed;
_stStatusCompact.HasJob               := fbAxis.pAxisRef^.Status.HasJob; 
_stStatusCompact.HasBeenStopped       := fbAxis.pAxisRef^.Status.HasBeenStopped; 
_stStatusCompact.NewTargetPosition    := fbAxis.pAxisRef^.Status.NewTargetPosition;
_stStatusCompact.InPositionArea       := fbAxis.pAxisRef^.Status.InPositionArea; 
_stStatusCompact.InTargetPosition     := fbAxis.pAxisRef^.Status.InTargetPosition; 

_stStatusCompact.Homed                := fbAxis.pAxisRef^.Status.Homed; 
_stStatusCompact.HomingBusy           := fbAxis.pAxisRef^.Status.HomingBusy; 
_stStatusCompact.MotionCommandsLocked := fbAxis.pAxisRef^.Status.MotionCommandsLocked;
_stStatusCompact.SoftLimitMinExceeded := fbAxis.pAxisRef^.Status.SoftLimitMinExceeded;
_stStatusCompact.SoftLimitMaxExceeded := fbAxis.pAxisRef^.Status.SoftLimitMaxExceeded;

_stStatusCompact.Moving               := fbAxis.pAxisRef^.Status.Moving; 
_stStatusCompact.PositiveDirection    := fbAxis.pAxisRef^.Status.PositiveDirection; 
_stStatusCompact.NegativeDirection    := fbAxis.pAxisRef^.Status.NegativeDirection; 
_stStatusCompact.NotMoving            := fbAxis.pAxisRef^.Status.NotMoving; 
_stStatusCompact.Compensating         := fbAxis.pAxisRef^.Status.Compensating;

_stStatusCompact.ExtSetPointGenEnabled:= fbAxis.pAxisRef^.Status.ExtSetPointGenEnabled; 
_stStatusCompact.ExternalLatchValid   := fbAxis.pAxisRef^.Status.ExternalLatchValid; 
_stStatusCompact.CamDataQueued        := fbAxis.pAxisRef^.Status.CamDataQueued; 
_stStatusCompact.CamTableQueued       := fbAxis.pAxisRef^.Status.CamTableQueued; 
_stStatusCompact.CamScalingPending    := fbAxis.pAxisRef^.Status.CamScalingPending; 
_stStatusCompact.CmdBuffered          := fbAxis.pAxisRef^.Status.CmdBuffered; 
_stStatusCompact.PTPmode              := fbAxis.pAxisRef^.Status.PTPmode; 
_stStatusCompact.DriveDeviceError     := fbAxis.pAxisRef^.Status.DriveDeviceError; 
_stStatusCompact.IoDataInvalid        := fbAxis.pAxisRef^.Status.IoDataInvalid; 

(* Axis.NcToPlc.CoupleState *)
_stStatusCompact.Coupled              := fbAxis.pAxisRef^.Status.Coupled;

StatusCompact := _stStatusCompact;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="stCam" Id="{8bf760e5-9e5c-43c8-b1e6-8d1a22f72000}">
      <Declaration><![CDATA[PROPERTY stCam : ST_CamIn]]></Declaration>
      <Get Name="Get" Id="{e76469c6-e0e9-4e83-976b-ad4eb2a9116b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stCam := _stCamIn;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1d471f82-189c-447e-9a58-f41ad63eb10b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stCamIn := stCam;

IF NOT IsFinite(F_Real(_stCamIn.MasterOffset))
THEN
  _stCamIn.MasterOffset := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stCamIn.SlaveOffset))
THEN
  _stCamIn.SlaveOffset := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stCamIn.MasterScaling))
THEN
  _stCamIn.MasterScaling := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stCamIn.SlaveScaling))
THEN
  _stCamIn.SlaveScaling := 0.0;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="stGear" Id="{fa9d1ff6-2d0a-4237-abf7-cac685cad935}">
      <Declaration><![CDATA[PROPERTY stGear : ST_GearIn]]></Declaration>
      <Get Name="Get" Id="{c38b43e7-42b5-4784-8bf0-3f7f7bd20d86}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stGear := _stGearIn;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e7283018-8590-48d0-b408-53f8cb06b7aa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stGearIn := stGear;

IF NOT IsFinite(F_Real(_stGearIn.Acceleration))
THEN
  _stGearIn.Acceleration := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearIn.Deceleration))
THEN
  _stGearIn.Deceleration := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearIn.Jerk))
THEN
  _stGearIn.Jerk := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearIn.RatioNumerator))
THEN
  _stGearIn.RatioNumerator := 0.0;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="stGearMultiMaster" Id="{485b351e-f18a-4580-9def-5c78bc56230d}">
      <Declaration><![CDATA[PROPERTY stGearMultiMaster : ST_GearInMultiMaster]]></Declaration>
      <Get Name="Get" Id="{79eaaa13-3ae8-4d77-8721-0d72d409868a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stGearMultiMaster := _stGearInMultiMaster;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7b9579bc-4601-4dd4-b5e7-a3c20ecc7f69}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stGearInMultiMaster := stGearMultiMaster;

IF NOT IsFinite(F_Real(_stGearInMultiMaster.Acceleration))
THEN
  _stGearInMultiMaster.Acceleration := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.Deceleration))
THEN
  _stGearInMultiMaster.Deceleration := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.Jerk))
THEN
  _stGearInMultiMaster.Jerk := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.GearRatio1))
THEN
  _stGearInMultiMaster.GearRatio1 := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.GearRatio2))
THEN
  _stGearInMultiMaster.GearRatio2 := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.GearRatio3))
THEN
  _stGearInMultiMaster.GearRatio3 := 0.0;
END_IF

IF NOT IsFinite(F_Real(_stGearInMultiMaster.GearRatio4))
THEN
  _stGearInMultiMaster.GearRatio4 := 0.0;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_AxisController">
      <LineId Id="11668" Count="130" />
      <LineId Id="12139" Count="1" />
      <LineId Id="12239" Count="0" />
      <LineId Id="12134" Count="0" />
      <LineId Id="12240" Count="0" />
      <LineId Id="12242" Count="1" />
      <LineId Id="12340" Count="2" />
      <LineId Id="12435" Count="0" />
      <LineId Id="12142" Count="1" />
      <LineId Id="12235" Count="2" />
      <LineId Id="12245" Count="0" />
      <LineId Id="11801" Count="0" />
      <LineId Id="12138" Count="0" />
      <LineId Id="11802" Count="51" />
      <LineId Id="11860" Count="42" />
      <LineId Id="12628" Count="0" />
      <LineId Id="11903" Count="0" />
      <LineId Id="12629" Count="1" />
      <LineId Id="11904" Count="13" />
      <LineId Id="12533" Count="0" />
      <LineId Id="12531" Count="1" />
      <LineId Id="12534" Count="0" />
      <LineId Id="12529" Count="0" />
      <LineId Id="11918" Count="32" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Cam_In">
      <LineId Id="169" Count="103" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Cam_Out">
      <LineId Id="84" Count="14" />
      <LineId Id="208" Count="0" />
      <LineId Id="210" Count="2" />
      <LineId Id="221" Count="0" />
      <LineId Id="220" Count="0" />
      <LineId Id="213" Count="6" />
      <LineId Id="209" Count="0" />
      <LineId Id="101" Count="10" />
      <LineId Id="182" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="188" Count="5" />
      <LineId Id="198" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="194" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="201" Count="5" />
      <LineId Id="125" Count="2" />
      <LineId Id="131" Count="8" />
      <LineId Id="177" Count="0" />
      <LineId Id="175" Count="1" />
      <LineId Id="140" Count="2" />
      <LineId Id="146" Count="8" />
      <LineId Id="179" Count="2" />
      <LineId Id="156" Count="13" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Disable">
      <LineId Id="24" Count="1" />
      <LineId Id="4" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Enable">
      <LineId Id="45" Count="1" />
      <LineId Id="12" Count="1" />
      <LineId Id="49" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="15" Count="5" />
      <LineId Id="54" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="53" Count="0" />
      <LineId Id="30" Count="6" />
      <LineId Id="41" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Gear_In">
      <LineId Id="2" Count="7" />
      <LineId Id="11" Count="1" />
      <LineId Id="79" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="14" Count="6" />
      <LineId Id="81" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="22" Count="7" />
      <LineId Id="83" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="12" />
      <LineId Id="46" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="48" Count="8" />
      <LineId Id="85" Count="0" />
      <LineId Id="57" Count="2" />
      <LineId Id="61" Count="12" />
      <LineId Id="78" Count="0" />
      <LineId Id="74" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Gear_In_Multimaster">
      <LineId Id="2" Count="6" />
      <LineId Id="95" Count="1" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="4" />
      <LineId Id="98" Count="0" />
      <LineId Id="17" Count="6" />
      <LineId Id="93" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="26" Count="7" />
      <LineId Id="100" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="17" />
      <LineId Id="55" Count="4" />
      <LineId Id="102" Count="0" />
      <LineId Id="60" Count="8" />
      <LineId Id="103" Count="0" />
      <LineId Id="69" Count="2" />
      <LineId Id="73" Count="14" />
      <LineId Id="92" Count="0" />
      <LineId Id="88" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Gear_Out">
      <LineId Id="2" Count="3" />
      <LineId Id="43" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="9" Count="10" />
      <LineId Id="45" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="48" Count="11" />
      <LineId Id="61" Count="2" />
      <LineId Id="60" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="27" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="28" Count="9" />
      <LineId Id="42" Count="0" />
      <LineId Id="38" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Halt">
      <LineId Id="2" Count="4" />
      <LineId Id="60" Count="0" />
      <LineId Id="7" Count="9" />
      <LineId Id="61" Count="0" />
      <LineId Id="17" Count="3" />
      <LineId Id="53" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="71" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="35" Count="1" />
      <LineId Id="67" Count="3" />
      <LineId Id="55" Count="0" />
      <LineId Id="37" Count="7" />
      <LineId Id="49" Count="0" />
      <LineId Id="45" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Home">
      <LineId Id="2" Count="3" />
      <LineId Id="104" Count="0" />
      <LineId Id="6" Count="5" />
      <LineId Id="111" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="113" Count="2" />
      <LineId Id="13" Count="8" />
      <LineId Id="105" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="23" Count="28" />
      <LineId Id="107" Count="0" />
      <LineId Id="52" Count="21" />
      <LineId Id="103" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="78" Count="6" />
      <LineId Id="108" Count="0" />
      <LineId Id="85" Count="9" />
      <LineId Id="116" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="96" Count="3" />
      <LineId Id="109" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Idle">
      <LineId Id="24" Count="14" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Init">
      <LineId Id="323" Count="37" />
      <LineId Id="483" Count="4" />
      <LineId Id="361" Count="121" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Move_Buffer">
      <LineId Id="2" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="7" Count="6" />
      <LineId Id="43" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="44" Count="0" />
      <LineId Id="20" Count="6" />
      <LineId Id="45" Count="0" />
      <LineId Id="27" Count="3" />
      <LineId Id="54" Count="0" />
      <LineId Id="47" Count="6" />
      <LineId Id="46" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="37" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Move_Buffer_Velocity">
      <LineId Id="110" Count="17" />
      <LineId Id="129" Count="5" />
      <LineId Id="136" Count="1" />
      <LineId Id="185" Count="0" />
      <LineId Id="138" Count="4" />
      <LineId Id="144" Count="13" />
      <LineId Id="186" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="170" Count="3" />
      <LineId Id="179" Count="5" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Move_Pos">
      <LineId Id="3" Count="3" />
      <LineId Id="65" Count="0" />
      <LineId Id="7" Count="6" />
      <LineId Id="66" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="67" Count="0" />
      <LineId Id="20" Count="7" />
      <LineId Id="68" Count="0" />
      <LineId Id="28" Count="9" />
      <LineId Id="69" Count="0" />
      <LineId Id="38" Count="21" />
      <LineId Id="64" Count="0" />
      <LineId Id="60" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Move_Velo">
      <LineId Id="226" Count="17" />
      <LineId Id="245" Count="1" />
      <LineId Id="301" Count="0" />
      <LineId Id="247" Count="3" />
      <LineId Id="252" Count="1" />
      <LineId Id="302" Count="0" />
      <LineId Id="254" Count="4" />
      <LineId Id="260" Count="13" />
      <LineId Id="304" Count="0" />
      <LineId Id="274" Count="10" />
      <LineId Id="303" Count="0" />
      <LineId Id="285" Count="15" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Parameter">
      <LineId Id="2" Count="2" />
      <LineId Id="52" Count="0" />
      <LineId Id="5" Count="17" />
      <LineId Id="54" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="26" Count="2" />
      <LineId Id="58" Count="0" />
      <LineId Id="29" Count="5" />
      <LineId Id="59" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="36" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="38" Count="8" />
      <LineId Id="48" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Reset">
      <LineId Id="89" Count="78" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Reset_SS1">
      <LineId Id="2" Count="76" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Stop">
      <LineId Id="2" Count="4" />
      <LineId Id="41" Count="0" />
      <LineId Id="7" Count="6" />
      <LineId Id="42" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="15" Count="2" />
      <LineId Id="40" Count="0" />
      <LineId Id="18" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="22" Count="10" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="35" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_Stop_SS1">
      <LineId Id="61" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="64" Count="1" />
      <LineId Id="129" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="116" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="102" Count="1" />
      <LineId Id="100" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="104" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="125" Count="3" />
      <LineId Id="106" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.Axis_WriteBufferMode">
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="5" />
      <LineId Id="16" Count="0" />
      <LineId Id="30" Count="4" />
      <LineId Id="85" Count="0" />
      <LineId Id="72" Count="12" />
      <LineId Id="3" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis1.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis1.Set">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis2.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis2.Set">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis3.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis3.Set">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis4.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.MasterAxis4.Set">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.StatusCompact.Get">
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="48" />
      <LineId Id="12" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stCam.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stCam.Set">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stGear.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stGear.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stGearMultiMaster.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_AxisController.stGearMultiMaster.Set">
      <LineId Id="3" Count="34" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>