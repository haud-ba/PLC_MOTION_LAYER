<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_NciChannel" Id="{864c23e4-8b3e-49d6-a4dd-34c031c14e38}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_NciChannel IMPLEMENTS I_NciChannel
VAR
  stMsg                 : ST_Message;
  ChannelDevice         : e_Device;

//MCS-Axes
  _ipMcsAxis            : ARRAY[1..GVL_NCI.cMcAxisCount] OF I_McAxis;
  _iMcCount,
  _iMcCountConfigured   : DINT;
  _bMcAxisMismatch      : BOOL;

//Aux-Axes
  _ipAuxAxis            : ARRAY[1..GVL_NCI.cAuxAxisCount] OF I_McAxis;
  _iAuxCount,
  _iAuxCountConfigured  : DINT;
  _bAuxAxisMismatch     : BOOL;

  _bErrorCyclicChecks   : BOOL;


//NCI-Channel reference
  _refNciChannelRef     : ST_NciChannel_Ref;

//NCI-Error
  _ErrorCode            : UDINT;
  
//NCI-Group
  fbBuildGroup          : Tc2_NCI.CfgBuildExt3DGroup;
  fbClearGroup          : Tc2_NCI.CfgReconfigGroup;

  _stCfgAxes            : Tc2_NCI.NCI_EXT3DGROUP;   //Configured Group Axes

  _fOverride            : LREAL := 100;

  _Build, 
  _Move                 : BOOL;

  _mdx,
  _adx                  : UINT;
  
//NCI-Program
  fbLoadProg            : Tc2_NCI.ItpLoadProgEx;

  _sProg                : STRING(255);

//Interpreter
  fbReset               : Tc2_NCI.ItpResetEx2;
  fbStartStop           : Tc2_NCI.ItpStartStopEx;
  fbEStop               : Tc2_NCI.ItpEStopEx;
  fbStepOnAfterEStop    : Tc2_NCI.ItpStepOnAfterEStopEx;

  fbItpConfirmHsk       : Tc2_NCI.ItpConfirmHsk;
  fbItpReadRParams      : Tc2_NCI.ItpReadRParamsEx;
  fbItpWriteRParams     : Tc2_NCI.ItpWriteRParamsEx;
  fbItpDelDtg           : Tc2_NCI.ItpDelDtgEx;

  
//ADS-Communication
  fbReadLine            : Tc2_System.ADSREADEX;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT (_refNciChannelRef.NcToPlc.ChnId <> 0)
THEN
  RETURN;
END_IF

ChannelDevice := e_Device.NciChannel + (_refNciChannelRef.NcToPlc.ChnId);

_iMcCount   := 0;
_iAuxCount  := 0;

FOR _mdx := 1 TO GVL_NCI.cMcAxisCount
DO
  IF (_ipMcsAxis[_mdx] <> 0)
  THEN
    _iMcCount := _iMcCount + 1;
  END_IF
END_FOR

FOR _adx := 1 TO GVL_NCI.cAuxAxisCount
DO
  IF (_ipAuxAxis[_adx] <> 0)
  THEN
    _iAuxCount := _iAuxCount + 1;
  END_IF
END_FOR

IF (_iAuxCount <> _iAuxCountConfigured) OR
   (_iMcCount  <> _iMcCountConfigured) 
THEN
  // get first occurance of error
  IF NOT _bMcAxisMismatch
  THEN
    stMsg.eType             := E_MessageType.eMessageError;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.General;
    stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_McAxis;
    stMsg.sText             := 'MC Axis count mismatch';
    f_MessageSet(stMsg);
  END_IF

  // get first ocurrance of error
  IF NOT _bAuxAxisMismatch
  THEN
    stMsg.eType             := E_MessageType.eMessageError;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.General;
    stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_AuxAxis;
    stMsg.sText             := 'Aux Axis count mismatch';
    f_MessageSet(stMsg);
  END_IF
ELSE
  // get change of error
  IF _bMcAxisMismatch
  THEN
    stMsg.eType             := E_MessageType.eMessageInfo;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.General;
    stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_McAxis;
    stMsg.sText             := 'MC Axis count match';
    f_MessageSet(stMsg);
  END_IF

  // get change of error
  IF _bAuxAxisMismatch
  THEN
    stMsg.eType             := E_MessageType.eMessageInfo;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.General;
    stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_AuxAxis;
    stMsg.sText             := 'Aux Axis count match';
    f_MessageSet(stMsg);
  END_IF
END_IF

_bMcAxisMismatch  := (_iMcCount  <> _iMcCountConfigured);
_bAuxAxisMismatch := (_iAuxCount <> _iAuxCountConfigured);


]]></ST>
    </Implementation>
    <Folder Name="methods" Id="{c93ff2a0-18b5-0f43-1e8a-3e6b15919076}" />
    <Folder Name="properties" Id="{ea3e3d33-7bdf-0e3f-0b66-08e0bf95ab42}" />
    <Method Name="BuildGroup" Id="{5d28650d-565a-447e-a53f-a4b7bb9f0a86}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.CfgBuildExt3DGroup

  Builds complete NCI-Group with all configured axes
===============================================================
*)
METHOD BuildGroup : HRESULT
VAR_INPUT
  Execute        : BOOL;
END_VAR
VAR_INST
  istate          : DINT;
  stMsg           : ST_Message;
  hr              : HRESULT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[

IF NOT Execute
THEN
  istate := 0;
END_IF


CASE istate OF
  0:
    hr:= S_FALSE;
    fbBuildGroup( bExecute  := FALSE, 
                  nGroupId  := ItpGetGroupId(sNciToPlc:=_refNciChannelRef.NcToPlc) , 
                  nXAxisId  := _stCfgAxes.nXAxisId,
                  nYAxisId  := _stCfgAxes.nYAxisId, 
                  nZAxisId  := _stCfgAxes.nZAxisId, 
                  nQ1AxisId := _stCfgAxes.nQ1AxisId,
                  nQ2AxisId := _stCfgAxes.nQ2AxisId, 
                  nQ3AxisId := _stCfgAxes.nQ3AxisId, 
                  nQ4AxisId := _stCfgAxes.nQ4AxisId, 
                  nQ5AxisId := _stCfgAxes.nQ5AxisId);

    IF Execute
    THEN
      istate                := 10;
    END_IF
END_CASE
CASE istate OF
  10:
    fbBuildGroup( bExecute  := TRUE, 
                  nGroupId  := ItpGetGroupId(sNciToPlc:=_refNciChannelRef.NcToPlc));

    IF fbBuildGroup.bBusy 
    THEN
      hr:= S_FALSE;
    
    ELSIF fbBuildGroup.bErr 
    THEN
      istate                := 99;

      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbBuildGroup;
      stMsg.iErrorNumber    := fbBuildGroup.nErrId;
      stMsg.sText           := concat('BuildGroup Error: ', TO_STRING(fbBuildGroup.nErrId));
      f_MessageSet(stMsg);

      hr:= TO_DINT(fbBuildGroup.nErrId);

    ELSE
      istate                := 100;

      stMsg.eType           := E_MessageType.eMessageInfo;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbBuildGroup;
      stMsg.iErrorNumber    := fbBuildGroup.nErrId;
      stMsg.sText           := concat('BuildGroup Done: ', TO_STRING(fbBuildGroup.nErrId));
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE istate OF
  100:
    hr:= S_OK;
END_CASE

//Return Result
BuildGroup:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="CfgAxes" Id="{f36f1907-db19-44b9-9ccc-2957c4133236}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
NCI-Group configured axes structure
===============================================================
*)
PROPERTY CfgAxes : Tc2_NCI.NCI_EXT3DGROUP
]]></Declaration>
      <Set Name="Set" Id="{344c3376-f790-4d40-b9fb-ee3b9688b5b5}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_stCfgAxes := CfgAxes;  //Configured Group Axes
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ClearGroup" Id="{6e99d18f-72f7-4a93-b975-5975e13fd420}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.CfgReconfigGroup

  remove all axes from NCI-Group
===============================================================
*)
METHOD ClearGroup : HRESULT
VAR_INPUT
  Execute   : BOOL;
END_VAR
VAR_INST
  istate    : DINT;
  stMsg     : ST_Message;
  hr        : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  istate := 0;
END_IF


CASE istate OF
  0:
    hr:= S_FALSE;
    fbClearGroup( bExecute:= FALSE, 
                  nGroupId:= ItpGetGroupId(sNciToPlc:= _refNciChannelRef.NcToPlc));

    IF Execute
    THEN
      istate                := 10;
    END_IF
END_CASE
CASE istate OF
  10:
    fbClearGroup( bExecute:= TRUE, 
                  nGroupId:= ItpGetGroupId(sNciToPlc:= _refNciChannelRef.NcToPlc));

    IF fbClearGroup.bBusy 
    THEN
      hr:= S_FALSE;
    
    ELSIF fbClearGroup.bErr 
    THEN
      istate                := 99;

      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbClearGroup;
      stMsg.iErrorNumber    := fbClearGroup.nErrId;
      stMsg.sText           := concat('BuildGroup Error: ', TO_STRING(fbClearGroup.nErrId));
      f_MessageSet(stMsg);

      hr:= TO_DINT(fbClearGroup.nErrId);

    ELSE
      istate                := 100;

      stMsg.eType           := E_MessageType.eMessageInfo;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbClearGroup;
      stMsg.iErrorNumber    := fbClearGroup.nErrId;
      stMsg.sText           := concat('ClearGroup Done: ', TO_STRING(fbClearGroup.nErrId));
      f_MessageSet(stMsg);

    END_IF
END_CASE
CASE istate OF
  100:
    hr := S_OK;
END_CASE

//Return Result
ClearGroup:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmHSK" Id="{572d0e72-5400-48f4-b773-ce7690e39529}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpConfirmHsk

  acknowledge M-Function
===============================================================
*)
METHOD ConfirmHSK : HRESULT
VAR_INPUT
  Execute   : BOOL;
END_VAR
VAR_INST
  hr        : HRESULT;
  istate    : DINT;
  stMsg     : ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  istate              := 0;
END_IF


CASE istate OF
  0:
    hr                                        := S_FALSE;
    _refNciChannelRef.PlcToNc.MFuncGranted    := 0;

    IF Execute
    THEN
      IF (_refNciChannelRef.PlcToNc.ChnAxesOvr > 0) AND NOT
         (_refNciChannelRef.NcToPlc.ChnState.8)
      THEN
        IF (_refNciChannelRef.NcToPlc.HskMFuncReq = 1)
        THEN
          istate                              := 10;
        END_IF
      END_IF
    END_IF

  10:
    _refNciChannelRef.PlcToNc.MFuncGranted    := 1;

    IF (_refNciChannelRef.NcToPlc.HskMFuncReq = 0)
    THEN
      istate                                  := 100;
      _refNciChannelRef.PlcToNc.MFuncGranted  := 0;
    END_IF
END_CASE
CASE istate OF
  100:
    hr                                        := S_OK;
END_CASE

//Return Result
ConfirmHSK:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DelDTG" Id="{0e540a92-b501-4118-84d9-00f55ac2f348}" FolderPath="methods\">
      <Declaration><![CDATA[// delete distance to go
METHOD DelDTG : HRESULT
VAR_INPUT
  Execute     : BOOL;
END_VAR
VAR_INST
  istate      : DINT;
  stMsg       : ST_Message;
  hr          : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  istate := 0;
END_IF


CASE istate OF
  0:
    hr:= S_FALSE;

    fbItpDelDtg(sNciToPlc   := _refNciChannelRef.NcToPlc, 
                bExecute    := FALSE);

    IF Execute
    THEN
      istate                := 10;
    END_IF
END_CASE
CASE istate OF
  10:
    fbItpDelDtg(sNciToPlc   := _refNciChannelRef.NcToPlc, 
                bExecute    := TRUE);

    IF fbItpDelDtg.bBusy 
    THEN
      hr:= S_FALSE;
    
    ELSIF fbItpDelDtg.bErr 
    THEN
      istate                := 99;

      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbDelDtgItp;
      stMsg.iErrorNumber    := fbItpDelDtg.nErrId;
      stMsg.sText           := concat('fbItpDelDtg Error: ', TO_STRING(fbItpDelDtg.nErrId));
      f_MessageSet(stMsg);

      hr:= TO_DINT(stMsg.iErrorNumber);

    ELSE
      istate                := 100;

      stMsg.eType           := E_MessageType.eMessageInfo;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbDelDtgItp;
      stMsg.iErrorNumber    := fbItpDelDtg.nErrId;
      stMsg.sText           := concat('fbItpDelDtg Done: ', TO_STRING(fbItpDelDtg.nErrId));
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE istate OF
  100:
    hr:= S_OK;
END_CASE

//Return Result
DelDTG:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Error" Id="{16832d0f-bb6a-4e99-983c-12941b2d1bf3}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
Error-Flag
===============================================================
*)
PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{b1ec714b-ba43-4f8f-bc79-92e6976b0b9a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[// get error from channel state
Error:= Error_Get();
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Error_Get" Id="{cd58ae9f-fd2f-4e23-b2ac-7d6cebfadfb1}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Error_Get : BOOL
VAR_INST
  i               : INT;
  stMsg           : ST_Message;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Return Value
Error_Get:= FALSE;

//NciChannel
IF _refNciChannelRef.NcToPlc.ErrorCode <> 0 
THEN
  stMsg.eType         := E_MessageType.eMessageError;
  stMsg.eDevice       := ChannelDevice;
  stMsg.eSubdevice    := e_Subdevice.Get_Error;
  stMsg.iErrorNumber  := _refNciChannelRef.NcToPlc.ErrorCode;
  stMsg.sText         := concat('NCI-Error: ', TO_STRING(_refNciChannelRef.NcToPlc.ErrorCode));
  f_MessageSet(stMsg);
  Error_Get:= TRUE;
  RETURN;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="EStop" Id="{7bc7338e-ae40-49b6-9bd2-602bfaf70267}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpEStopEx
===============================================================
*)
METHOD EStop : HRESULT
VAR_INPUT
  Execute   : BOOL;
END_VAR
VAR_INST
  istate    : DINT;
  stMsg     : ST_Message;
  hr        : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  istate := 0;
END_IF


CASE istate OF
  0:
    hr                    := S_FALSE;

    fbEStop(sNciToPlc     := _refNciChannelRef.NcToPlc, 
            bExecute      := FALSE);

    IF Execute
    THEN
      istate              := 10;
    END_IF
END_CASE
CASE istate OF
  10:
    fbEStop(sNciToPlc     := _refNciChannelRef.NcToPlc, 
            bExecute      := TRUE);

    IF fbEStop.bBusy 
    THEN
      hr:= S_FALSE;
    
    ELSIF fbEStop.bErr 
    THEN
      istate                := 99;

      stMsg.eType           := E_MessageType.eMessageError;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbEStopItp;
      stMsg.iErrorNumber    := fbEStop.nErrId;
      stMsg.sText           := concat('fbEStopItp Error: ', TO_STRING(fbEStop.nErrId));
      f_MessageSet(stMsg);

      hr:= TO_DINT(fbEStop.nErrId);
    ELSE
      istate                := 100;

      stMsg.eType           := E_MessageType.eMessageInfo;
      stMsg.eDevice         := ChannelDevice;
      stMsg.eSubdevice      := e_Subdevice.fbEStopItp;
      stMsg.iErrorNumber    := fbEStop.nErrId;
      stMsg.sText           := concat('fbEStopItp Done: ', TO_STRING(fbEStop.nErrId));
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE istate OF
  100:
    hr:= S_OK;
END_CASE

//Return Result
EStop:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetChannelOverride" Id="{cb330ed1-7aef-0c06-166a-74874361acc0}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetChannelOverride : real
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetChannelOverride := TO_REAL(_refNciChannelRef.PlcToNc.ChnAxesOvr)/10_000.0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetItpState" Id="{73889a9f-cd40-4d28-90dd-994056266384}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD GetItpState : uint
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetItpState := _refNciChannelRef.NcToPlc.ItpState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="HSK" Id="{973c272d-79d9-4bf8-84aa-17bc86289d09}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
Handshake: Announce and acknowledge M-Functions
===============================================================
*)
PROPERTY HSK : BOOL]]></Declaration>
      <Get Name="Get" Id="{d6e59ed4-239c-4172-96df-4fb6d8e4eed6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
HSK :=  TO_BOOL(_refNciChannelRef.NcToPlc.HskMFuncReq);

]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="I_AuxAxis" Id="{3b2a9f10-f476-4df3-9167-cdc9e716cf85}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY I_AuxAxis : ARRAY[1..GVL_NCI.cAuxAxisCount] OF I_McAxis
]]></Declaration>
      <Set Name="Set" Id="{fea04ced-659b-4270-b239-1b45c3698d48}">
        <Declaration><![CDATA[VAR
  idx : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ipAuxAxis := I_AuxAxis;

_iAuxCountConfigured := 0;
FOR idx := 1 TO GVL_NCI.cAuxAxisCount
DO
  IF (_ipAuxAxis[idx] <> 0)
  THEN
    _iAuxCountConfigured := _iAuxCountConfigured + 1;
  END_IF
END_FOR
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="I_McAxis" Id="{b5a2b846-8789-49c8-8edd-48cdf71ed214}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY I_McAxis : array[1..GVL_NCI.cMcAxisCount] of I_McAxis]]></Declaration>
      <Set Name="Set" Id="{7a65ccce-b693-4170-848d-e0b46866b3b8}">
        <Declaration><![CDATA[VAR
  idx : dint;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ipMcsAxis := I_McAxis;

_iMcCountConfigured := 0;
FOR idx := 1 TO GVL_NCI.cMcAxisCount
DO
  IF (_ipMcsAxis[idx] <> 0)
  THEN
    _iMcCountConfigured := _iMcCountConfigured + 1;
  END_IF
END_FOR

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ItpAxes" Id="{8545817d-8d31-40a9-99cd-1fc72637da86}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
NCI-Group configured axes structure
===============================================================
*)
PROPERTY ItpAxes : Tc2_NCI.NCI_EXT3DGROUP
]]></Declaration>
      <Get Name="Get" Id="{57064642-e5fc-4982-b628-af2ba8a6afe3}">
        <Declaration><![CDATA[VAR
  stItpAxes     :Tc2_NCI.NCI_EXT3DGROUP;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
stItpAxes.nXAxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[0];
stItpAxes.nYAxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[1];
stItpAxes.nZAxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[2];
stItpAxes.nQ1AxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[3];
stItpAxes.nQ2AxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[4];
stItpAxes.nQ3AxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[5];
stItpAxes.nQ4AxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[6];
stItpAxes.nQ5AxisId := _refNciChannelRef.NcToPlc.AcsAxisIDs[7];

ItpAxes := stItpAxes;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ItpReset" Id="{c6ddb4ac-d750-4606-b5a3-454ea9fcfd6e}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpResetEx2
===============================================================
*)
METHOD ItpReset   : HRESULT
VAR_INPUT
  Execute         : BOOL;
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                    := 0;
  nStateError               := 0;
END_IF

CASE nState OF
  0:
  hr                        := S_FALSE;

  fbReset(bExecute          := FALSE, 
          tTimeOut          := T#1S, 
          sNciToPlc         := _refNciChannelRef.NcToPlc);
 
  IF Execute 
  THEN
    nState                  := 10;
  END_IF
END_CASE
CASE nState OF
  10:
  fbReset(bExecute          := TRUE, 
          tTimeOut          := T#1S, 
          sNciToPlc         := _refNciChannelRef.NcToPlc);

  IF fbReset.bBusy 
  THEN
    hr                      := S_FALSE;
  ELSIF fbReset.bErr 
  THEN
    stMsg.eType             := E_MessageType.eMessageError;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.fbResetItp;
    stMsg.iErrorNumber      := fbReset.nErrId;
    stMsg.sText             := concat('ItpReset Error: ', UDINT_TO_STRING(fbReset.nErrId));
    f_MessageSet(stMsg);

    hr                      := UDINT_TO_DINT(fbReset.nErrId);
    nStateError             := nState;
    nState                  := 99;
  ELSE
    _sProg                  := '';
    nState                  := 100;
  END_IF
END_CASE
CASE nState OF
  100:
  //Done
  hr                         := S_OK;
END_CASE
//Return Result
ItpReset:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadProg" Id="{4e0f1dca-0bec-4cb4-80ee-74e3ab3c3d23}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpLoadProgEx
===============================================================
*)
METHOD LoadProg   : HRESULT
VAR_INPUT
  Execute         : BOOL;
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                            := 0;
  nStateError                       := 0;
END_IF

CASE nState OF
  0:
    hr                              := S_FALSE;

    fbLoadProg(sNciToPlc            := _refNciChannelRef.NcToPlc, 
               bExecute             := FALSE, 
               sPrg                 := _sProg, 
               nLength              := TO_UDINT(LEN(_sProg)));
    IF Execute
    THEN
      nState := 10;
    END_IF
END_CASE
CASE nState OF
  10:
    fbLoadProg(sNciToPlc            := _refNciChannelRef.NcToPlc, 
               bExecute             := TRUE, 
               sPrg                 := _sProg, 
               nLength              := TO_UDINT(LEN(_sProg)));
  
    IF fbLoadProg.bErr
    THEN
      stMsg.eType                   := E_MessageType.eMessageError;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbLoadProg;
      stMsg.iErrorNumber            := fbLoadProg.nErrId;
      stMsg.sText                   := concat('LoadProg Error: ', TO_STRING(fbLoadProg.nErrId));
      f_MessageSet(stMsg);

      hr                            := TO_DINT(fbLoadProg.nErrId);

      nState                        := 99;
   
    ELSIF NOT fbLoadProg.bBusy
    THEN
      nState                        := 100;

      stMsg.eType                   := E_MessageType.eMessageInfo;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbLoadProg;
      stMsg.iErrorNumber            := fbLoadProg.nErrId;
      stMsg.sText                   := concat('LoadProg Done: ', fbLoadProg.sPrg);
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE nState OF
  100:
    //Done
    hr                              := S_OK;
END_CASE
//Return Result
LoadProg:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="MFunc" Id="{6e97d105-ba78-44b6-b82b-1a0dde532fec}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
M-Function
===============================================================
*)
PROPERTY MFunc : INT]]></Declaration>
      <Get Name="Get" Id="{7a0a5dab-98ec-4b02-b476-598dbb4c7e5e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
MFunc := TO_INT(_refNciChannelRef.NcToPlc.HskMFuncNo);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Override" Id="{3c5cf7e6-5016-0d93-1971-771019e90abf}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY Override : LREAL
]]></Declaration>
      <Get Name="Get" Id="{7786179f-ab8c-0bbc-2d16-86d03c15f981}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Override := Tc2_NCI.ItpGetOverridePercent(_refNciChannelRef.PlcToNc);
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{cee40f28-b9e8-0f80-3d12-3909af3d1975}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Tc2_NCI.ItpSetOverridePercent(Override, _refNciChannelRef.PlcToNc);
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="PathVelo" Id="{36e96532-99c1-42bf-a732-9ec21a55762f}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
actual path velo [Units/s]
===============================================================
*)
PROPERTY PathVelo : LREAL]]></Declaration>
      <Get Name="Get" Id="{b1529dbc-92d7-4fdd-8ffc-0fe4a996c7bb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
PathVelo := _refNciChannelRef.NcToPlc.PathVelo;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="pNciChannelRef" Id="{acc653d3-47ba-4528-95c7-0ea00613dd3f}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY pNciChannelRef : POINTER TO ST_NciChannel_Ref
]]></Declaration>
      <Get Name="Get" Id="{8c5b64ab-a333-4b63-b58d-e2d8f6121fb7}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[pNciChannelRef := ADR(_refNciChannelRef);

]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Prog" Id="{df37d9d1-1d53-46b4-a6e0-6a32b47b4875}" FolderPath="properties\">
      <Declaration><![CDATA[(*
===============================================================
G-Code Program Name (sFilePath)
===============================================================
*)
PROPERTY Prog : STRING(255)
]]></Declaration>
      <Get Name="Get" Id="{9ed73b40-4b5d-4da2-bc03-7fb576268d63}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Prog:=_sProg;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{81270384-b914-4900-849d-8cb63f26b444}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sProg:=Prog;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReadLine" Id="{cc1bd94b-7cfd-4967-bb77-2097798def85}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_System.ADSREADEX

  reads actual interpreter G-Code Line
===============================================================
*)
METHOD ReadLine   : HRESULT
VAR_INPUT
  Execute         : BOOL;
END_VAR
//Read G-Code actual Line
VAR_OUTPUT
  ActProgLine     : STRING(100);
END_VAR
VAR_INST
  ReadString      : STRING(100);
  nBlockNo        : UDINT;

  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                    := 0;
  nStateError               := 0;
END_IF

CASE nState OF
  0:
  hr                        := S_FALSE;

  fbReadLine(PORT           := 500, 
             IDXGRP         := 16#2300 + _refNciChannelRef.NcToPlc.ChnId, // + ChannelID
             IDXOFFS        := 16#2000_0001,
             LEN            := SIZEOF(ReadString),
             DESTADDR       := ADR(ReadString), 
             READ           := FALSE);
  
  IF Execute 
  THEN
    nState                  := 10;
    nBlockNo                := _refNciChannelRef.NcToPlc.BlockNo;
  END_IF
END_CASE
CASE nState OF
  10:
  fbReadLine(PORT           := 500, 
             IDXGRP         := 16#2300 + _refNciChannelRef.NcToPlc.ChnId, // + ChannelID
             IDXOFFS        := 16#2000_0001,
             LEN            := SIZEOF(ReadString),
             DESTADDR       := ADR(ReadString), 
             READ           := TRUE);

  IF fbReadLine.ERR
  THEN
    stMsg.eType             := E_MessageType.eMessageError;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.fbReadLine;
    stMsg.iErrorNumber      := fbReadLine.ERRID;
    stMsg.sText             := concat('fbReadLine ADS error: ', TO_STRING(fbReadLine.ERRID));
    f_MessageSet(stMsg);

    nStateError             := nState;
    nState                  := 99;

  ELSIF NOT fbReadLine.BUSY
  THEN
    nState                  := 100;
    ActProgLine             := ReadString;

    stMsg.eType             := E_MessageType.eMessageInfo;
    stMsg.eDevice           := ChannelDevice;
    stMsg.eSubdevice        := e_Subdevice.fbReadLine;
    stMsg.iErrorNumber      := fbReadLine.ERRID;
    stMsg.sText             := CONCAT(CONCAT(CONCAT('ReadLine Done: ', ReadString), ' Lines:'), TO_STRING(fbReadLine.COUNT_R));
    f_MessageSet(stMsg);
  END_IF
END_CASE
CASE nState OF
  100:
  //Done
  hr                        := S_OK;
END_CASE

//Return Result
ReadLine:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReadRParams" Id="{3dc8c57c-94d6-4acc-9e12-fa999c7b1a02}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpReadRParamsEx

  read R-Parameter(s) from NCI
===============================================================
*)
METHOD ReadRParams : HRESULT
VAR_INPUT
  Execute  : BOOL;
  Addr     : POINTER TO LREAL;  // start adr of rParam array 
  Index    : DINT;              // start index of R[Index] in NCI
  Count    : DINT;              // count of R[index+i] in NCI
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                            := 0;
  nStateError                       := 0;
END_IF

CASE nState OF
  0:
  hr                                := S_FALSE;

  fbItpReadRParams( sNciToPlc       := _refNciChannelRef.NcToPlc, 
                    bExecute        := FALSE, 
                    pAddr           := Addr, 
                    nIndex          := Index, 
                    nCount          := Count);
  
  IF Execute 
  THEN
    nState                          := 10;
  END_IF
END_CASE
CASE nState OF
  10:
  fbItpReadRParams( sNciToPlc       := _refNciChannelRef.NcToPlc, 
                    bExecute        := TRUE, 
                    pAddr           := Addr, 
                    nIndex          := Index, 
                    nCount          := Count);

  IF fbItpReadRParams.bErr
  THEN
    stMsg.eType                     := E_MessageType.eMessageError;
    stMsg.eDevice                   := ChannelDevice;
    stMsg.eSubdevice                := e_Subdevice.fbItpReadRParams;
    stMsg.iErrorNumber              := fbItpReadRParams.nErrId;
    stMsg.sText                     := concat('fbItpReadRParams Error: ', 
                                              TO_STRING(fbItpReadRParams.nERRID));
    f_MessageSet(stMsg);

    hr                              := TO_DINT(fbItpReadRParams.nErrId);
    nStateError                     := nState;
    nState                          := 99;

  ELSIF NOT fbItpReadRParams.bBusy
  THEN
    nState                          := 100;

    stMsg.eType                     := E_MessageType.eMessageInfo;
    stMsg.eDevice                   := ChannelDevice;
    stMsg.eSubdevice                := e_Subdevice.fbItpReadRParams;
    stMsg.iErrorNumber              := fbItpReadRParams.nErrId;
    stMsg.sText                     := concat('fbItpReadRParams Done: ', 
                                              TO_STRING(fbItpReadRParams.nCount));
    f_MessageSet(stMsg);
  END_IF
END_CASE
CASE nState OF
  100:
  //Done
  hr                                := S_OK;
END_CASE

//Return Result
ReadRParams:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartStop" Id="{a499e4a1-4938-4ed9-b529-4cc75a22ae8e}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpStartStopEx

  Start Interpreter
===============================================================
*)
METHOD StartStop : HRESULT
VAR_INPUT
  Start: BOOL;
  Stop: BOOL;
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbStartStop(bStart                  := Start, 
            bStop                   := Stop, 
            sNciToPlc               := _refNciChannelRef.NcToPlc);

  
IF fbStartStop.bBusy 
THEN
  hr                                := S_FALSE;

ELSIF fbStartStop.bErr 
THEN
  IF (stMsg.iErrorNumber <> fbStartStop.nErrId)
  THEN
    stMsg.eType                     := E_MessageType.eMessageError;
    stMsg.eDevice                   := ChannelDevice;
    stMsg.eSubdevice                := e_Subdevice.fbStartStopItp;
    stMsg.iErrorNumber              := fbStartStop.nErrId;
    stMsg.sText                     := concat('Start Interpreter ERROR: ', TO_STRING(fbStartStop.nErrId));
    f_MessageSet(stMsg);
  END_IF

  hr                                := UDINT_TO_DINT(fbStartStop.nErrId);
ELSE
  IF Start
  THEN
    stMsg.eType                     := E_MessageType.eMessageInfo;
    stMsg.eDevice                   := ChannelDevice;
    stMsg.eSubdevice                := e_Subdevice.fbStartStopItp;
    stMsg.iErrorNumber              := 0;
    stMsg.sText                     := concat('Start file: ', _sProg);
    f_MessageSet(stMsg);

  ELSIF Stop
  THEN
    stMsg.eType                     := E_MessageType.eMessageInfo;
    stMsg.eDevice                   := ChannelDevice;
    stMsg.eSubdevice                := e_Subdevice.fbStartStopItp;
    stMsg.iErrorNumber              := 0;
    stMsg.sText                     := concat('Stop file: ', _sProg);
    f_MessageSet(stMsg);
  END_IF
  hr                                := S_OK;
END_IF

//Return Result
StartStop:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StepOnAfterEStop" Id="{2868fb67-9daa-4e18-82c2-5d79020ec6c9}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpStopOnAfterEStopEx
===============================================================
*)
METHOD StepOnAfterEStop : HRESULT
VAR_INPUT
  Execute: BOOL;
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                            := 0;
  nStateError                       := 0;
END_IF

CASE nState OF
  0:
    hr                              := S_FALSE;
    fbStepOnAfterEStop(bExecute     := FALSE, 
                       sNciToPlc    := _refNciChannelRef.NcToPlc);

    IF Execute
    THEN
      nState                        := 10;
    END_IF
END_CASE
CASE nState OF
  10:
    fbStepOnAfterEStop(bExecute     := TRUE, 
                     sNciToPlc      := _refNciChannelRef.NcToPlc);
  
    IF fbStepOnAfterEStop.bErr
    THEN
      stMsg.eType                   := E_MessageType.eMessageError;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbStepOnAfterEStopItp;
      stMsg.iErrorNumber            := fbStepOnAfterEStop.nErrId;
      stMsg.sText                   := concat('StepOn Error: ', TO_STRING(fbStepOnAfterEStop.nErrId));
      f_MessageSet(stMsg);

      hr                            := TO_DINT(fbStepOnAfterEStop.nErrId);

      nState                        := 99;
   
    ELSIF NOT fbStepOnAfterEStop.bBusy
    THEN
      nState                        := 100;

      stMsg.eType                   := E_MessageType.eMessageInfo;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbStepOnAfterEStopItp;
      stMsg.iErrorNumber            := fbStepOnAfterEStop.nErrId;
      stMsg.sText                   := concat('StepOn Group: ', UDINT_TO_STRING(_refNciChannelRef.NcToPlc.GrpId));
      f_MessageSet(stMsg);


      fbStepOnAfterEStop(bExecute   := FALSE, 
                         sNciToPlc  := _refNciChannelRef.NcToPlc);
  
    END_IF
END_CASE
CASE nState OF
  100:
  //Done
  hr                                := S_OK;
END_CASE

//Return Result
StepOnAfterEStop:= hr;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteRParams" Id="{8bf36401-a2f1-41f9-a494-b576d6d23fd2}" FolderPath="methods\">
      <Declaration><![CDATA[(*
===============================================================
Implementation of Tc2_NCI.ItpWriteRParamsEx

  write R-Parameter(s) to NCI
===============================================================
*)
METHOD WriteRParams : HRESULT
VAR_INPUT
  Execute : BOOL;
  Addr    : POINTER TO LREAL; // Adresse der Zielvariablen der Daten. 
                              // Dabei werden die Daten direkt ab der angegebenen Adresse von der NC beschrieben  
                              // D.h. nIndex ist nicht als Offset zu pAddr zu sehen. Die Daten befinden sich z.B. 
                              // in einem Array vom Typ LREAL, das vom Anwender definiert werden muss.
  Index   : DINT;
  Count   : DINT;
END_VAR
VAR_INST
  stMsg           : ST_Message;
  nState,
  nStateError     : DINT;

  hr              : HRESULT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT Execute
THEN
  nState                            := 0;
  nStateError                       := 0;
END_IF

CASE nState OF
  0:
    hr                              := S_FALSE;

    fbItpWriteRParams(bExecute      := FALSE, 
                      pAddr         := Addr, 
                      nIndex        := Index, 
                      nCount        := Count, 
                      sNciToPlc     := _refNciChannelRef.NcToPlc);
    IF Execute
    THEN
      nState                        := 10;
    END_IF
END_CASE
CASE nState OF
  10:
    fbItpWriteRParams(bExecute      := TRUE, 
                      pAddr         := Addr, 
                      nIndex        := Index, 
                      nCount        := Count, 
                      sNciToPlc     := _refNciChannelRef.NcToPlc);

    IF fbItpWriteRParams.bErr
    THEN
      stMsg.eType                   := E_MessageType.eMessageError;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbItpWriteRParams;
      stMsg.iErrorNumber            := fbItpWriteRParams.nErrId;
      stMsg.sText                   := concat('fbItpWriteRParams Error: ', 
                                                TO_STRING(fbItpWriteRParams.nERRID));
      f_MessageSet(stMsg);
  
      hr                            := TO_DINT(fbItpWriteRParams.nErrId);
      nStateError                   := nState;
      nState                        := 99;
  
    ELSIF NOT fbItpWriteRParams.bBusy
    THEN
      nState                        := 100;
  
      stMsg.eType                   := E_MessageType.eMessageInfo;
      stMsg.eDevice                 := ChannelDevice;
      stMsg.eSubdevice              := e_Subdevice.fbItpWriteRParams;
      stMsg.iErrorNumber            := fbItpWriteRParams.nErrId;
      stMsg.sText                   := concat('fbItpWriteRParams Done: ', 
                                                TO_STRING(fbItpWriteRParams.nCount));
      f_MessageSet(stMsg);
    END_IF
END_CASE
CASE nState OF
  100:
  //Done
  hr                                := S_OK;
END_CASE
//Return Result
WriteRParams:= hr;

]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_NciChannel">
      <LineId Id="3" Count="77" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.BuildGroup">
      <LineId Id="3" Count="66" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.CfgAxes.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ClearGroup">
      <LineId Id="3" Count="58" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ConfirmHSK">
      <LineId Id="3" Count="39" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.DelDTG">
      <LineId Id="3" Count="58" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Error.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Error_Get">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.EStop">
      <LineId Id="3" Count="57" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.GetChannelOverride">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.GetItpState">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.HSK.Get">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.I_AuxAxis.Set">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.I_McAxis.Set">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ItpAxes.Get">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ItpReset">
      <LineId Id="3" Count="52" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.LoadProg">
      <LineId Id="3" Count="58" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.MFunc.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Override.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Override.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.PathVelo.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.pNciChannelRef.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Prog.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.Prog.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ReadLine">
      <LineId Id="3" Count="65" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.ReadRParams">
      <LineId Id="3" Count="64" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.StartStop">
      <LineId Id="3" Count="46" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.StepOnAfterEStop">
      <LineId Id="3" Count="60" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannel.WriteRParams">
      <LineId Id="3" Count="63" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>