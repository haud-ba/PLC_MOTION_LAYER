<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_Ctrl_NciChannel" Id="{d98e917a-dfce-0af8-11d1-14c6cc8b4bc0}" SpecialFunc="None">
    <Declaration><![CDATA[(*
-------------------------------------------------------------------------------
	NCI Channel Control

  2020/05/20  HAUD  0.1     kinematic and NCI separation
  2022/10/22  HAUD  0.2     PLC_OPEN_DRIVE adoption
-------------------------------------------------------------------------------
*)

// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.

FUNCTION_BLOCK FB_Ctrl_NciChannel IMPLEMENTS I_Nci_Ctrl
VAR
  _eCmd                 : e_Ctrl_NciCommand;

  _sState                : STRING;
  _nErrorId              : UDINT;
  _bError                : BOOL;

  _fPathVelo             : LREAL;
  _nBlockNo              : UDINT;
  _sProgLine             : STRING(100); 
  _nMFunc                : INT;
  _eState                : e_Ctrl_NciCommand;
  _uiStateItp            : UINT;



  _stMsg                 : ST_Message;
  _ChannelDevice         : e_Device := e_Device.NciChannelCtrl;

  _eCmdState,
  _eCmdExec,
  _eCmdExecOld,
  _eCmdOld,
  _eCmdActive            : e_Ctrl_NciCommand;

  _sCmd,
  _sCmdOld,
  _sCmdExec              : STRING(256);

  _nState,
  _nStateSS1             : DINT;

{IF defined (WIN)}
  _sProg                : STRING(255) := 'C:\TwinCAT\Mc\Nci\Test_GST.nc';
{ELSE}
  _sProg                : STRING(255) := '/usr/local/etc/TwinCAT/Mc/Nci/Test_GST.nc';
{END_IF}

  _stMFuncCyclic        : ST_Ctrl_NciMFuncCycle;

  _nChnId               : UINT;
  // R[] Params used in G-Code
  // R[0..899]    local namespace of Channel
  // R[900..999]  global namespace of NC
  _iri,
  _irc,
  _iRParamIndex,
  _iRParamCount         : DINT;

  _rRParamsRead,
  _rRParamsWrite        : ARRAY [0..GVL_NCI.cRParamCount] OF LREAL;

//MCS-Axes
  _ipMcsAxis            : ARRAY[1..GVL_NCI.cMcAxisCount] OF I_McAxis;
  _iMcCount,
  _iMcCountConfigured   : DINT;
  _bMcAxisMismatch      : BOOL;

//Aux-Axes
  _ipAuxAxis            : ARRAY[1..GVL_NCI.cAuxAxisCount] OF I_McAxis;
  _iAuxCount,
  _iAuxCountConfigured  : DINT;
  _bAuxAxisMismatch     : BOOL;


  _bErrorCyclicChecks   : BOOL;

  _mdx,
  _adx                  : UINT;
  _hr                   : HRESULT;

  _fbNciChannel         : FB_NciChannel;
  _ipNciChannel         : I_NciChannel;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Actions" Id="{1e29f249-e801-0c4a-3fcf-d3181fe0aa79}" />
    <Folder Name="methods" Id="{aa9abe98-f25f-43e0-978d-3bc6b8798b9a}" />
    <Folder Name="properties" Id="{c041ba04-f33c-4e1b-9bc1-5ba9e5058261}" />
    <Action Name="Channel_BuildGroup" Id="{35144abe-bf23-0ecb-1df2-6eec99dde6e4}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                       := S_FALSE;
    _nState                   := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_BUSY;

    _ipNciChannel.I_AuxAxis   := _ipAuxAxis;
    _ipNciChannel.I_McAxis    := _ipMcsAxis;

    _hr                       := _ipNciChannel.BuildGroup(FALSE);

    _nState                   := 20;
END_CASE
CASE _nState OF
  20:
    _hr                       := _ipNciChannel.BuildGroup(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.BuildGroup(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.BuildGroup(FALSE);
        _nState               := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_ClearGroup" Id="{521fc1e3-7d19-006e-25e4-1083121a71bd}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                       := S_FALSE;
    _nState                   := 10;

  10:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_BUSY;

    _ipNciChannel.I_AuxAxis   := _ipAuxAxis;
    _ipNciChannel.I_McAxis    := _ipMcsAxis;

    _hr                       := _ipNciChannel.ClearGroup(FALSE);

    _nState                   := 20;


  20:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                       := _ipNciChannel.ClearGroup(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.ClearGroup(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.ClearGroup(FALSE);
        _nState               := 900;
      END_IF
    END_IF

  100:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Confirm" Id="{c2ea154e-7799-0b31-3fcc-288d14a792ac}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                       := S_FALSE;
    _nState                   := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_BUSY;

    IF (_stMFuncCyclic.HskMFuncReq > 0)
    THEN
      _hr                     := _ipNciChannel.ConfirmHSK(FALSE);
      _nState                 := 20;
    END_IF
END_CASE
CASE _nState OF
  20:
    _hr                       := _ipNciChannel.ConfirmHSK(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.ConfirmHSK(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.ConfirmHSK(FALSE);
        _nState               := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                 := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_LoadProg" Id="{4a7c3119-e6cf-0795-20fd-7085a929dd28}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                 := S_FALSE;
    _nState              := 10;

  10:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive          := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec            := e_Ctrl_NciCommand.CMD_BUSY;

    IF NOT (len(NcProg) > 10)
    THEN
      _nState             := 900;
    ELSE
      _ipNciChannel.Prog  := NcProg;
  
      _hr                 := _ipNciChannel.LoadProg(FALSE);
  
      _nState             := 20;
    END_IF

  20:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                 := _ipNciChannel.LoadProg(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr               := _ipNciChannel.LoadProg(FALSE);

      _nState            := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr             := _ipNciChannel.LoadProg(FALSE);

        _nState          := 900;
      END_IF
    END_IF

  100:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive          := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec            := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive          := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec            := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_R_Read" Id="{fc030524-31c6-094a-2132-bde3524ca233}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_BUSY;

    _iri          := _iRParamIndex;
    _irc          := _iRParamCount;
    _hr           := _ipNciChannel.ReadRParams(FALSE,
                                               ADR(_rRParamsRead),
                                               _iri,
                                               _irc);
    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.ReadRParams(TRUE,
                                               ADR(_rRParamsRead),
                                               _iri,
                                               _irc);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.ReadRParams(FALSE,
                                ADR(_rRParamsRead),
                                _iri,
                                _irc);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.ReadRParams(FALSE,
                                  ADR(_rRParamsRead),
                                  _iri,
                                  _irc);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_R_Write" Id="{7f126f08-63eb-0591-1298-c1478aae5baa}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_BUSY;

    _iri          := _iRParamIndex;
    _irc          := _iRParamCount;
    _hr           := _ipNciChannel.WriteRParams(FALSE,
                                                ADR(_rRParamsWrite),
                                                _iri,
                                                _irc);
    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.WriteRParams(TRUE,
                                                ADR(_rRParamsWrite),
                                                _iri,
                                                _irc);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.WriteRParams(FALSE,
                                 ADR(_rRParamsWrite),
                                 _iri,
                                 _irc);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.WriteRParams(FALSE,
                                   ADR(_rRParamsWrite),
                                   _iri,
                                   _irc);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Reset" Id="{ed297de6-be1f-0380-3acc-35fc72405db0}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_BUSY;

    _hr           := _ipNciChannel.ItpReset(FALSE);

    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.ItpReset(TRUE);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.ItpReset(FALSE);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.ItpReset(FALSE);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec      := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Restart" Id="{9a4e750b-e652-0ae6-2cfc-d36a403ebbb0}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_BUSY;

    _hr                     := _ipNciChannel.StepOnAfterEStop(FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StepOnAfterEStop(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StepOnAfterEStop(FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StepOnAfterEStop(FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Start" Id="{4cbe882f-e9ca-0acf-27cc-62aaf82d4421}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_BUSY;

    _hr                     := _ipNciChannel.StartStop(FALSE, FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StartStop(TRUE, FALSE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StartStop(FALSE, FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StartStop(FALSE, FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Stop" Id="{39d2a555-f01a-0651-3c69-f2b9dc3edae9}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_BUSY;

    _hr                     := _ipNciChannel.StartStop(FALSE, FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StartStop(FALSE, TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StartStop(FALSE, FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StartStop(FALSE, FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + e_Ctrl_NciCommand.CMD_ERROR;
    _eCmdExec                := e_Ctrl_NciCommand.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Property Name="ChnId" Id="{ae567423-dad6-0874-178e-8318ecd18b03}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ChnId : udint]]></Declaration>
      <Get Name="Get" Id="{d7fc7be6-d84a-00d2-2780-d406f996464f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ChnId := _ipNciChannel.pNciChannelRef^.NcToPlc.ChnId;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Cycle" Id="{c228d3fc-298b-467d-8576-29da44a851c2}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Cycle
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// call NCI
_fbNciChannel();
_ipNciChannel := _fbNciChannel;


// cyclic plausibility checks
IF Init() <> S_OK 
THEN
  eState  := e_Ctrl_NciCommand.NO_INIT;
  RETURN;
END_IF


// cyclic data for M func from NCI interface
_stMFuncCyclic.FastMFuncMask  := _ipNciChannel.pNciChannelRef^.NcToPlc.FastMFuncMask;
_stMFuncCyclic.HskMFuncNo     := _ipNciChannel.pNciChannelRef^.NcToPlc.HskMFuncNo;
_stMFuncCyclic.HskMFuncReq    := _ipNciChannel.pNciChannelRef^.NcToPlc.HskMFuncReq;
_stMFuncCyclic.HFuncValue     := _ipNciChannel.pNciChannelRef^.NcToPlc.HFuncValue;

// M-Func to catch
IF _ipNciChannel.HSK 
THEN
  _nMFunc := _ipNciChannel.MFunc;
END_IF


// cmd change
IF (_eCmd <> _eCmdOld) OR
   (_eCmd = 0)
THEN
  _eCmdState                  := _eCmd;
  _nState      := _nStateSS1  := 0;
  _nMFunc                     := 0;
  _stMsg.sText                := '';
  _sState                     := '';
END_IF


CASE _eCmdState OF

  e_Ctrl_NciCommand.INIT:
    _eCmdActive                := _eCmdState + e_Ctrl_NciCommand.CMD_DONE;
    _eCmdExec                  := e_Ctrl_NciCommand.CMD_DONE;
    _nState                    := 0;

  e_Ctrl_NciCommand.IDLE:
    _eCmdActive                := _eCmdState + e_Ctrl_NciCommand.CMD_BUSY;
    _eCmdExec                  := e_Ctrl_NciCommand.CMD_BUSY;

    _uiStateItp                := _ipNciChannel.GetItpState();

    IF (_uiStateItp = TO_UINT(E_NCI_INTERPRETER_STATE.NCI_INTERPRETER_IDLE)) OR
       (_uiStateItp = TO_UINT(E_NCI_INTERPRETER_STATE.NCI_INTERPRETER_READY))
    THEN
      _eCmdActive              := _eCmdState + e_Ctrl_NciCommand.CMD_DONE;
      _eCmdExec                := e_Ctrl_NciCommand.CMD_DONE;
      _nState                  := 0;
    END_IF


  e_Ctrl_NciCommand.RESET:
    // reset for error
    // after reset nc file has to be loaded again
    Channel_Reset();

  e_Ctrl_NciCommand.LOAD_PROG:
    // set property NcProg before use
    // load nc file
    // syntax check on load done by NCI
    // error case: syntax check failed
    Channel_LoadProg();

  e_Ctrl_NciCommand.BUILD_GROUP:
    // set property GroupAxisConfig before use
    Channel_BuildGroup();

  e_Ctrl_NciCommand.CLEAR_GROUP:
    Channel_ClearGroup();

  e_Ctrl_NciCommand.START:
    // starts nc file execution
    Channel_Start();

  e_Ctrl_NciCommand.STOP,
  e_Ctrl_NciCommand.STO_STOP:
    Channel_Stop();

  e_Ctrl_NciCommand.RESTART_STEP_ON:
    // sart from last nc block
    Channel_Restart();

  e_Ctrl_NciCommand.M_FUNC_QUIT:
    Channel_Confirm();

  e_Ctrl_NciCommand.READ_R_PARA:
    Channel_R_Read();

  e_Ctrl_NciCommand.WRITE_R_PARA:
    Channel_R_Write();

  ELSE
    _eState                  := e_Ctrl_NciCommand.NO_INIT;
    _sState                  := concat(TO_STRING(_eCmdState), ' NOT valid eCmd');
    RETURN;
END_CASE

_eState                      := _eCmdActive;
_sState                      := TO_STRING(_eCmdState);
_sCmd                        := TO_STRING(eCmd);
_sCmdExec                    := TO_STRING(_eCmdExec);


IF (_eCmdOld <> eCmd)
THEN
  _sCmdOld                   := TO_STRING(_eCmdOld);
  _stMsg.eType               := E_MessageType.eMessageInfo;
  _stMsg.eDevice             := E_Device.NciChannelCtrl + TO_DINT(ChnId);
  _stMsg.eSubdevice          := e_Subdevice.Ctrl_Nci_Cmd;
  _stMsg.iErrorNumber        := _nChnId;

  _stMsg.sText               := 'change ';
  _stMsg.sText               := Tc2_Standard.CONCAT(_stMsg.sText, _sCmdOld);
  _stMsg.sText               := Tc2_Standard.CONCAT(_stMsg.sText, ' to ');
  _stMsg.sText               := Tc2_Standard.CONCAT(_stMsg.sText, sCmd);
  f_MessageSet(_stMsg);
END_IF

IF (_eCmdExecOld <> _eCmdExec)
THEN
  _stMsg.eType               := E_MessageType.eMessageInfo;
  _stMsg.eDevice             := E_Device.NciChannelCtrl + TO_DINT(ChnId);
  _stMsg.eSubdevice          := e_Subdevice.Ctrl_Nci_Cmd;
  _stMsg.iErrorNumber        := _nChnId;

  _stMsg.sText               := Tc2_Standard.CONCAT(sCmd, ' function: ');
  _stMsg.sText               := Tc2_Standard.CONCAT(_stMsg.sText, TO_STRING(_eCmdExec));
  f_MessageSet(_stMsg);
END_IF

_eCmdOld                     := eCmd;
_eCmdExecOld                 := _eCmdExec;

]]></ST>
      </Implementation>
    </Method>
    <Property Name="eCmd" Id="{aada2267-d2f8-4ccd-9c2a-ad4fbfa3855a}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY eCmd : e_Ctrl_NciCommand]]></Declaration>
      <Get Name="Get" Id="{31b52fc1-c86c-4cb0-8c01-b0179a55f17e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eCmd := _eCmd;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{498be40c-4cc5-4d23-8e54-787202cee764}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eCmd := eCmd;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="eState" Id="{c140c931-672f-418a-b4ed-3611e134ab7d}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY eState : e_Ctrl_NciCommand]]></Declaration>
      <Get Name="Get" Id="{fa1a870c-11c9-4dba-81f1-bfba35f0301a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eState := _eState;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e6927e30-4fa0-499b-822d-1eca35070390}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eState := eState;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="GroupAxisConfig" Id="{f40f685e-b357-0831-286e-3aa112bcf283}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY GroupAxisConfig : ST_3D_Group]]></Declaration>
      <Get Name="Get" Id="{9ff830b7-377d-0091-257b-1dbb099d4a88}">
        <Declaration><![CDATA[VAR
  st3DGroup       : ST_3D_Group;
  stNciExt3dGroup : NCI_EXT3DGROUP;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stNciExt3dGroup := _fbNciChannel.ItpAxes;
memcpy(ADR(st3DGroup), ADR(stNciExt3dGroup), SIZEOF(st3DGroup));
GroupAxisConfig := st3DGroup;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b3db89d1-a44b-09c2-233e-1785b1057c6d}">
        <Declaration><![CDATA[VAR
  st3DGroup       : ST_3D_Group;
  stNciExt3dGroup : NCI_EXT3DGROUP;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[st3DGroup := GroupAxisConfig;
memcpy(ADR(stNciExt3dGroup), ADR(st3DGroup), SIZEOF(stNciExt3dGroup));

_fbNciChannel.CfgAxes := stNciExt3dGroup;

]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="I_AuxAxis" Id="{90471759-78fd-4d2d-998a-9cadc4fd79da}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY I_AuxAxis : array[1..GVL_NCI.cAuxAxisCount] of I_McAxis]]></Declaration>
      <Get Name="Get" Id="{3298412d-9d81-43bc-b801-83755d490f2b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[I_AuxAxis := THIS^._ipAuxAxis;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{7fe3eb18-32bf-4076-accf-05ff95301b2a}">
        <Declaration><![CDATA[VAR
  idx : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[THIS^._ipAuxAxis := I_AuxAxis;

_iAuxCountConfigured := 0;
FOR idx := 1 TO GVL_NCI.cAuxAxisCount
DO
  IF (_ipAuxAxis[idx] <> 0)
  THEN
    _iAuxCountConfigured := _iAuxCountConfigured + 1;
  END_IF
END_FOR
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="I_McAxis" Id="{d31ec148-4790-475b-aab9-02297ff7d001}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY I_McAxis : array[1..GVL_NCI.cMcAxisCount] of I_McAxis]]></Declaration>
      <Get Name="Get" Id="{c4791b3a-4134-485f-84d4-f83bea82e8fc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[I_McAxis := THIS^._ipMcsAxis;

]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{de58be49-19c3-43e0-b0e6-99a9e5f3ce97}">
        <Declaration><![CDATA[VAR
  idx : DINT;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ipMcsAxis := I_McAxis;

_iMcCountConfigured := 0;
FOR idx := 1 TO GVL_NCI.cMcAxisCount
DO
  IF (_ipMcsAxis[idx] <> 0)
  THEN
    _iMcCountConfigured := _iMcCountConfigured + 1;
  END_IF
END_FOR
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="I_NcChannel" Id="{9610ce9e-8811-0073-334f-033f1b63090b}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY I_NcChannel : I_NciChannel]]></Declaration>
      <Get Name="Get" Id="{829c9b92-ad62-0732-1ee8-22c5ce3f2308}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[I_NcChannel := _fbNciChannel;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Init" Id="{872ac587-7d0c-0295-07d1-2d899ab8a6b3}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD PRIVATE Init : HRESULT
VAR_INST
  hr    : HRESULT   := S_FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF hr <> S_OK 
THEN

  _nChnId := _fbNciChannel.pNciChannelRef^.NcToPlc.ChnId;
  IF (_nChnId = 0)
  THEN
    _sState    := 'CannelId = 0';
    Init      := hr := -1;
    RETURN;
  ELSE
    _sState    := concat('CannelId = ', TO_STRING(_nChnId));
  END_IF
  
  _iMcCount   := 0;
  _iAuxCount  := 0;
  
  FOR _mdx := 1 TO GVL_NCI.cMcAxisCount
  DO
    IF (_ipMcsAxis[_mdx] <> 0)
    THEN
      _iMcCount := _iMcCount + 1;
    END_IF
  END_FOR
  
  FOR _adx := 1 TO GVL_NCI.cAuxAxisCount
  DO
    IF (_ipAuxAxis[_adx] <> 0)
    THEN
      _iAuxCount := _iAuxCount + 1;
    END_IF
  END_FOR
  
  IF (_iAuxCount <> _iAuxCountConfigured) OR
     (_iMcCount  <> _iMcCountConfigured) 
  THEN
    _sState                    := 'Axis count mismatch';

    // get first occurance of error
    IF NOT _bMcAxisMismatch
    THEN
      _stMsg.eType             := E_MessageType.eMessageError;
      _stMsg.eDevice           := _ChannelDevice;
      _stMsg.eSubdevice        := e_Subdevice.General;
      _stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_McAxis;
      _stMsg.sText             := 'MC Axis count mismatch';
      f_MessageSet(_stMsg);
    END_IF
  
    // get first ocurrance of error
    IF NOT _bAuxAxisMismatch
    THEN
      _stMsg.eType             := E_MessageType.eMessageError;
      _stMsg.eDevice           := _ChannelDevice;
      _stMsg.eSubdevice        := e_Subdevice.General;
      _stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_AuxAxis;
      _stMsg.sText             := 'Aux Axis count mismatch';
      f_MessageSet(_stMsg);
    END_IF
  ELSE
    // get change of error
    IF _bMcAxisMismatch
    THEN
      _stMsg.eType             := E_MessageType.eMessageInfo;
      _stMsg.eDevice           := _ChannelDevice;
      _stMsg.eSubdevice        := e_Subdevice.General;
      _stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_McAxis;
      _stMsg.sText             := 'MC Axis count match';
      f_MessageSet(_stMsg);
    END_IF
  
    // get change of error
    IF _bAuxAxisMismatch
    THEN
      _stMsg.eType             := E_MessageType.eMessageInfo;
      _stMsg.eDevice           := _ChannelDevice;
      _stMsg.eSubdevice        := e_Subdevice.General;
      _stMsg.iErrorNumber      := e_NciChannelError.e_AxisConfigurationMismatch_AuxAxis;
      _stMsg.sText             := 'Aux Axis count match';
      f_MessageSet(_stMsg);
    END_IF
  END_IF
  
  _bMcAxisMismatch  := (_iMcCount  <> _iMcCountConfigured);
  _bAuxAxisMismatch := (_iAuxCount <> _iAuxCountConfigured);
  
  IF (_bMcAxisMismatch) OR
     (_bAuxAxisMismatch)
  THEN
    _nErrorId    := SEL(_bMcAxisMismatch, _nErrorId, (_nErrorId OR 2#0001));
    _nErrorId    := SEL(_bAuxAxisMismatch,_nErrorId, (_nErrorId OR 2#001));
    _bError      := TRUE;
    RETURN;
  END_IF 


  _bError                  := FALSE;
  hr                       := S_OK;
  _eCmdState               := e_Ctrl_NciCommand.INIT;
  // initial assignement, 
  // if required; change on calling BuildGroup
  _fbNciChannel.I_AuxAxis := I_AuxAxis;
  _fbNciChannel.I_McAxis  := I_McAxis;
END_IF

//Return Value
Init := hr;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="M_FuncReq" Id="{01c52311-847e-0dea-32a2-3bfa6ef1e56c}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY M_FuncReq : word]]></Declaration>
      <Get Name="Get" Id="{817e4c3c-ddbc-0085-2ae9-5c51d2ea8d03}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[M_FuncReq := _fbNciChannel.pNciChannelRef^.NcToPlc.HskMFuncReq;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="NcProg" Id="{4baf68ea-a9e4-0c81-0ecd-42a8d6feb3ec}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY NcProg : string(255)]]></Declaration>
      <Get Name="Get" Id="{8a8addbe-f00b-030d-3765-a37afb4f4307}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NcProg := _sProg;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c8fd5635-adba-0cd6-0102-4970871a58bb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sProg := NcProg;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="R_Param_Read" Id="{d6483ca0-3754-0f69-04e8-7282ca9c6f8b}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY R_Param_Read : ARRAY [0..GVL_NCI.cRParamCount] OF lreal]]></Declaration>
      <Get Name="Get" Id="{51dd28d0-3a90-0584-3b1b-d898bc9605a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[R_Param_Read := _rRParamsRead;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f2f272a4-470b-0622-04d1-158a686158ec}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rRParamsRead := R_Param_Read;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="R_Param_Write" Id="{12aee3ae-4da5-0900-119e-f491d508c0d0}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY R_Param_Write : ARRAY [0..GVL_NCI.cRParamCount] OF lreal]]></Declaration>
      <Get Name="Get" Id="{c1b3b004-a197-0fde-0de2-f262aba5b1b7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[R_Param_Write := _rRParamsWrite;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6db2df1a-1666-0b81-2921-d6ec1cb8efd5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_rRParamsWrite := R_Param_Write;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="R_ParamCount" Id="{f7a566d5-012b-0122-09e8-1a790dec9913}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY R_ParamCount : DINT]]></Declaration>
      <Get Name="Get" Id="{44c1835a-e36a-0b8b-0438-398610628b0d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[R_ParamCount := _iRParamCount;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{da43b84b-685e-04f8-18bd-46c2ee872924}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iRParamCount := R_ParamCount;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="R_ParamIndex" Id="{08f4c028-49c7-0fb8-2904-db1129516b8b}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY R_ParamIndex : DINT]]></Declaration>
      <Get Name="Get" Id="{1bee1e37-49ff-0882-29c6-457f6296ce5e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[R_ParamIndex := _iRParamIndex;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5b8f6a4d-f6f5-0be7-09fe-4d13b772f9c2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iRParamIndex := R_ParamIndex;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="sCmd" Id="{5686fd42-d29a-4fd7-adf2-c5328087da1a}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY sCmd : string]]></Declaration>
      <Get Name="Get" Id="{34e591ad-8742-42f7-bd2c-429db07b4b0e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sCmd := _sCmd;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0de46316-d0b6-4cba-ab2f-2a7609e1c1fc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sCmd := sCmd;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_Ctrl_NciChannel">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_BuildGroup">
      <LineId Id="2" Count="41" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_ClearGroup">
      <LineId Id="2" Count="43" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_Confirm">
      <LineId Id="2" Count="40" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_LoadProg">
      <LineId Id="2" Count="48" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_R_Read">
      <LineId Id="2" Count="51" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_R_Write">
      <LineId Id="2" Count="51" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_Reset">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_Restart">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_Start">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Channel_Stop">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.ChnId.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Cycle">
      <LineId Id="3" Count="141" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.eCmd.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.eCmd.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.eState.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.eState.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.GroupAxisConfig.Get">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.GroupAxisConfig.Set">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.I_AuxAxis.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.I_AuxAxis.Set">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.I_McAxis.Get">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.I_McAxis.Set">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.I_NcChannel.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.Init">
      <LineId Id="3" Count="105" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.M_FuncReq.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.NcProg.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.NcProg.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_Param_Read.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_Param_Read.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_Param_Write.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_Param_Write.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_ParamCount.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_ParamCount.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_ParamIndex.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.R_ParamIndex.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.sCmd.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Ctrl_NciChannel.sCmd.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>