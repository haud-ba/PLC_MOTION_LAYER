<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{92364988-986c-4411-b611-3f16f7544e5f}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	uiFrm0_State				AT %I* : UINT;
	uiFrm0_WcState			AT %I* : UINT;
	uiFrm0_InputToggle	AT %I* : UINT;
	uiSlaveCount				AT %I* : UINT;
	uiDevState					AT %I* : UINT;

{IF defined (TEST)}
  {info 'TEST'}
	bSafety_OK					       : BOOL := TRUE;
{ELSE}
	bSafety_OK					AT %I* : BOOL; // Input for TwinSAFE signal for SS1 stop
{END_IF}

	aOut	AT %Q* : BOOL;
	bTic				 : BOOL;
	diCounter		 : DINT;
	imod				 : INT := 10;

	szAxisCtrl, 
	szAxisCtrlPlc, 
	szAxisCtrlC, 
	szNcParam,
	szHomeParam	: UINT;
	iAxisIndex	: INT := 1;
	i						: INT;

	rtrigWriteFile		: R_TRIG;
  tonWriteFile      : TON;
  tWriteFile        : time := t#5s;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Local time; used for timestamps
GVL_AXIS_CTRL.gfbLocalTime(sLocalTime=> GVL_AXIS_CTRL.gsLocalTime, dtLocalTime=> GVL_AXIS_CTRL.gdtLocalTime);


diCounter := diCounter + 1;

// tic for ADS notification
IF (diCounter MOD imod = 0)
THEN
	bTic          := NOT bTic;
	aOut          := NOT aOut;
END_IF

szAxisCtrl      := SIZEOF(GVL_AXIS_CTRL.gstAxisControl[iAxisIndex]);
szAxisCtrlPlc   := SIZEOF(GVL_AXIS_CTRL.gstAxisControl[iAxisIndex].ToPlc);
szAxisCtrlC     := SIZEOF(GVL_AXIS_CTRL.gstAxisControl[iAxisIndex].FromPlc);
szNcParam       := SIZEOF(GVL_AXIS_CTRL.gstAxisParam[iAxisIndex]);
szHomeParam     := SIZEOF(GVL_AXIS_CTRL.gstHomeParam[iAxisIndex]);

FOR i := 1 TO GVL_AXIS_CTRL.gciMaxAxis
DO
  CASE GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.uiAxisFunctionReq 
  OF
    //-----------------------------------------------------------------------------------------------------------------
    // GearIn
    //-----------------------------------------------------------------------------------------------------------------
    e_AxisFunction.AXIS_GEAR_IN:

      IF(GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara > 0) AND
        (GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara <= GVL_AXIS_CTRL.gciMaxAxis)
      THEN
        // copy index to diag array
        GVL_AXIS_CTRL.gbyAxisIdxGearIn[i]                       := GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara; // FuncParam for GEAR_IN carries array index of master axis
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis1          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gbyAxisIdxGearIn[i]].fbAxis.pAxisRef;
        GVL_AXIS_CTRL.gfbAxisController[i].stGear               := GVL_AXIS_CTRL.gstAxisGearParam[i];
        GVL_AXIS_CTRL.gstAxisControl[i].FromPlc.byAxisFuncPara  := GVL_AXIS_CTRL.gbyAxisIdxGearIn[i];
      END_IF


    //-----------------------------------------------------------------------------------------------------------------
    // GearInMultimaster
    //-----------------------------------------------------------------------------------------------------------------
    e_AxisFunction.AXIS_GEAR_IN_MULTIMASTER:

      // Master 1
      IF(GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster1 > 0) AND
        (GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster1 <= GVL_AXIS_CTRL.gciMaxAxis) 
      THEN
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,1]          := GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster1;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis1          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster1].fbAxis.pAxisRef;
      ELSE
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,1]          := 0;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis1          := 0;
      END_IF

      // Master 2
      IF(GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster2 > 0) AND
        (GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster2 <= GVL_AXIS_CTRL.gciMaxAxis)	  
      THEN
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,2]          := GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster2;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis2          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster2].fbAxis.pAxisRef;
      ELSE
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,2]          := 0;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis2          := 0;
      END_IF 

      // Master 3
      IF(GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster3 > 0) AND
       (GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster3 <= GVL_AXIS_CTRL.gciMaxAxis)
      THEN
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,3]          := GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster3;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis3          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster3].fbAxis.pAxisRef;
      ELSE
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,3]          := 0;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis3          := 0;
      END_IF

      // Master 4	 
      IF(GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster4 >= 0) AND
        (GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster4 <= GVL_AXIS_CTRL.gciMaxAxis)
      THEN
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,4]          := GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster4;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis4          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i].byAxisIDMaster4].fbAxis.pAxisRef;
      ELSE
        GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,4]          := 0;
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis4          := 0;
      END_IF

      GVL_AXIS_CTRL.gfbAxisController[i].stGearMultiMaster      := GVL_AXIS_CTRL.gstAxisGearMultiMasterParam[i];


    //-----------------------------------------------------------------------------------------------------------------
    // CamIn
    //-----------------------------------------------------------------------------------------------------------------
    e_AxisFunction.AXIS_CAM_IN:

      IF(GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara > 0) AND
        (GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara <= GVL_AXIS_CTRL.gciMaxAxis)
      THEN
      // copy index to diag array
        GVL_AXIS_CTRL.gbyAxisIdxCamIn[i]                        := GVL_AXIS_CTRL.gstAxisControl[i].ToPlc.byAxisFuncPara; // FuncParam carries array index of master axis
      // assign master axis
        GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis1          := GVL_AXIS_CTRL.gfbAxisController[GVL_AXIS_CTRL.gbyAxisIdxCamIn[i]].fbAxis.pAxisRef;
      // assign CAM parameters
        GVL_AXIS_CTRL.gfbAxisController[i].stCam                := GVL_AXIS_CTRL.gstAxisCamParam[i];
      // copy index to FromPLC structure 
        GVL_AXIS_CTRL.gstAxisControl[i].FromPlc.byAxisFuncPara  := GVL_AXIS_CTRL.gbyAxisIdxCamIn[i];
      END_IF


	
  ELSE  
    GVL_AXIS_CTRL.gbyAxisIdxGearIn[i]                           := 0;

    GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,1]              := 0;
    GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,2]              := 0;
    GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,3]              := 0;
    GVL_AXIS_CTRL.gbyAxisIdxGearInMultiMaster[i,4]              := 0;

    GVL_AXIS_CTRL.gbyAxisIdxCamIn[i]                            := 0;
    GVL_AXIS_CTRL.gfbAxisController[i].MasterAxis1              := 0;
  END_CASE


  //-----------------------------------------------------------------------------------------------------------------
  // Axis cyclic call
  //-----------------------------------------------------------------------------------------------------------------
	GVL_AXIS_CTRL.gfbAxisController[i](	stCtrl	                  := GVL_AXIS_CTRL.gstAxisControl[i].ToPlc,   // global struct to write on 

                                      bSS1						          := bSafety_OK, 
                                      stHomingOptions	          := GVL_AXIS_CTRL.gstHomeParam[i], 
                                      stNcParameter		          := GVL_AXIS_CTRL.gstAxisParam[i],
                                      stMotionOptions           := GVL_AXIS_CTRL.gstMotionOptions[i],

                                      stState					          => GVL_AXIS_CTRL.gstAxisControl[i].FromPlc  // global struct to read from
                                     );   
END_FOR

tonWriteFile(IN := TRUE, PT := tWriteFile);

IF tonWriteFile.Q
THEN
  p_Data.bWriteFile := TRUE;
  tonWriteFile(IN:=FALSE);
END_IF  

//-----------------------------------------------------------------------------------------------------------------
// write message list to file
//-----------------------------------------------------------------------------------------------------------------
p_Data(pList			:= ADR(GVL_AXIS_CTRL.gatMessages),
			 pLocalTime := ADR(GVL_AXIS_CTRL.gdtLocalTime), 
			 bBusy=> );



IF p_Data.bWriteFile AND
   p_Data.bBusy
THEN
  p_Data.bWriteFile := FALSE;
END_IF

P_CopleyWorkAround();
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="1593" Count="135" />
      <LineId Id="1742" Count="25" />
      <LineId Id="513" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>