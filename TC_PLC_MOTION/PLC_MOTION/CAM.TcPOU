<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="CAM" Id="{9788bdef-fe43-088d-22e7-ce2c54a5a9f7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM CAM
VAR
  bInit                     : BOOL;
  eInit                     : E_PROGRESS;

  nAxis,
  nAxisInit                 : UINT;

  stMsg                     : ST_Message;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//-----------------------------------------------------------------------------------------------------------------
// check if compiler define is present [PLC_STATE_DRIVE/CompilerDefines/Manual: CAM]
// see PLC_CONSTANT for conditional pragma
//-----------------------------------------------------------------------------------------------------------------
IF NOT PLC_CONSTANT.CAM_ACTIVE THEN eInit := E_PROGRESS.PROGRESS_NOT_EXIST; RETURN; END_IF
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// check for MAIN.eInit
//-----------------------------------------------------------------------------------------------------------------
IF NOT (MAIN.eInit = E_PROGRESS.PROGRESS_DONE) THEN eInit   := E_PROGRESS.PROGRESS_INVALID; RETURN; END_IF
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// /assign dataflow
//-----------------------------------------------------------------------------------------------------------------
FOR nAxis := 1 TO PLC_CONSTANT.MAX_AXIS
DO
  GVL_CAM.Control[nAxis].ItfMcAxes                := GVL_AXIS.ItfMcAxis;

  GVL_CAM.Control[nAxis].AxisIndex                := nAxis;

  GVL_CAM.Control[nAxis].AxisCtrl                 := ADR(GVL_CAM.Ctrl);          // command
  GVL_CAM.Control[nAxis].AxisState                := ADR(GVL_CAM.State);         // state + result of command

  GVL_CAM.Control[nAxis].Axes                     REF=   GVL_AXIS.AxisRef;        // All for one; coupling requires access across all axes

  GVL_CAM.Control[nAxis].AxisInfo                 := ADR(GVL_CAM.Info);
  GVL_CAM.Control[nAxis].AxisData                 := ADR(GVL_CAM.Data);

  GVL_CAM.Control[nAxis].MotionFunction           := ADR(GVL_CAM.MotionFunction);
  GVL_CAM.Control[nAxis].MotionFunctionPoint      := ADR(GVL_CAM.MotionFunctionPoint);
END_FOR
//-----------------------------------------------------------------------------------------------------------------
// assign dataflow/
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// /INIT
//-----------------------------------------------------------------------------------------------------------------
IF NOT bInit
THEN
  CASE eInit
  OF
    E_PROGRESS.PROGRESS_INVALID,
    E_PROGRESS.PROGRESS_DONE:
      FOR nAxis := 1 TO PLC_CONSTANT.MAX_AXIS
      DO
        GVL_CAM.Control[nAxis].MessageLevel       := GVL_MSG.MessageLevelAxisCam;
      END_FOR
      nAxisInit                                   := 1;
      eInit                                       := E_PROGRESS.PROGRESS_INIT;


    E_PROGRESS.PROGRESS_INIT:
      stMsg.eType                                 := E_MessageType.eMessageVerbose;
      stMsg.eDevice                               := e_Device.Camming;
      stMsg.eSubdevice                            := e_SubDevice.CamStartUp;
      stMsg.iErrorNumber                          := nAxisInit;

      stMsg.sText                                 := concat('CAM.eInit: ', TO_STRING(eInit));

      IF (GVL_MSG.MessageLevelAxisCam = E_MessageType.eMessageVerbose)
      THEN
        f_MessageSet(stMsg);
      END_IF

      GVL_CAM.Ctrl[nAxisInit].eCmd               := E_AXIS_CTRL.AXIS_NULL;
      eInit                                       := E_PROGRESS.PROGRESS_BUSY;


    E_PROGRESS.PROGRESS_BUSY:
      GVL_CAM.Ctrl[nAxisInit].eCmd               := E_AXIS_CTRL.AXIS_INIT;

      IF (GVL_CAM.State[nAxisInit].eState = E_AXIS_STATE.AXIS_INIT + E_PROGRESS.PROGRESS_ERROR)
      THEN
        eInit                                     := E_PROGRESS.PROGRESS_ERROR;

        stMsg.eType                               := E_MessageType.eMessageError;
        stMsg.eDevice                             := e_Device.Camming;
        stMsg.eSubdevice                          := e_SubDevice.CamStartUp;
        stMsg.iErrorNumber                        := nAxisInit;

        stMsg.sText                               := concat('CAM.eInit ERROR at Index: ', TO_STRING(nAxisInit));
        f_MessageSet(stMsg);

      ELSIF (GVL_CAM.State[nAxisInit].eState = E_AXIS_STATE.AXIS_INIT + E_PROGRESS.PROGRESS_DONE)
      THEN
        eInit                                     := E_PROGRESS.PROGRESS_CHECK;
      END_IF


    E_PROGRESS.PROGRESS_CHECK:
      IF (nAxisInit > PLC_CONSTANT.MAX_AXIS-1)
      THEN
        bInit                                     := TRUE;
        eInit                                     := E_PROGRESS.PROGRESS_DONE;

        stMsg.eType                               := E_MessageType.eMessageInfo;
        stMsg.eDevice                             := e_Device.Camming;
        stMsg.eSubdevice                          := e_SubDevice.CamStartUp;
        stMsg.iErrorNumber                        := MAX_AXIS;

        stMsg.sText                               := concat('CAM.eInit: ', TO_STRING(eInit));
        f_MessageSet(stMsg);

      ELSE
        nAxisInit                                 := nAxisInit + 1;
        eInit                                     := E_PROGRESS.PROGRESS_INIT;
      END_IF
  END_CASE
END_IF
//-----------------------------------------------------------------------------------------------------------------
// INIT
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// /cyclic
//-----------------------------------------------------------------------------------------------------------------
IF (eInit <> E_PROGRESS.PROGRESS_ERROR)
THEN
  FOR nAxis := 1 TO PLC_CONSTANT.MAX_AXIS
  DO
      GVL_CAM.Control[nAxis].Cycle();
  END_FOR
END_IF
//-----------------------------------------------------------------------------------------------------------------
// cyclic/
//-----------------------------------------------------------------------------------------------------------------

]]></ST>
    </Implementation>
    <LineIds Name="CAM">
      <LineId Id="19" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="194" Count="4" />
      <LineId Id="180" Count="0" />
      <LineId Id="108" Count="3" />
      <LineId Id="146" Count="1" />
      <LineId Id="112" Count="8" />
      <LineId Id="160" Count="0" />
      <LineId Id="159" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="130" Count="3" />
      <LineId Id="24" Count="8" />
      <LineId Id="210" Count="1" />
      <LineId Id="213" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="33" Count="10" />
      <LineId Id="218" Count="0" />
      <LineId Id="214" Count="3" />
      <LineId Id="45" Count="61" />
      <LineId Id="23" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>