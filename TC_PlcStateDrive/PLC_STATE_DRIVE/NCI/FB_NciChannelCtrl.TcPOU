<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_NciChannelCtrl" Id="{08de930f-89ec-0b64-0188-963be0624f4a}" SpecialFunc="None">
    <Declaration><![CDATA[(*
-------------------------------------------------------------------------------
	NCI Channel Control

  2020/05/20  HAUD  0.1     kinematic and NCI separation
  2022/10/22  HAUD  0.2     PLC_OPEN_DRIVE adaption
  2023/12/29  HAUD  0.3     PLC_STATE_DRIVE adaption
-------------------------------------------------------------------------------
*)

// This SOFTWARE is provided as an Exemple by THE PROVIDER "as is" and "with all faults." THE PROVIDER makes no 
// representations or warranties of any kind concerning the safety, suitability, lack of viruses, inaccuracies, 
// typographical errors, or other harmful components of this SOFTWARE. There are inherent dangers in the use of 
// any software, and you are solely responsible for determining whether this SOFTWARE is compatible with your 
// equipment and other software installed on your equipment. You are also solely responsible for the protection 
// of your equipment and backup of your data, and THE PROVIDER will not be liable for any damages you may suffer 
// in connection with using, modifying, or distributing this SOFTWARE.

FUNCTION_BLOCK FB_NciChannelCtrl EXTENDS FB_NciChannel IMPLEMENTS I_Nci_Ctrl
VAR
  _nChnId               : UINT;

  _eCmd,
  _eCmdOld              : E_NCI_CTRL;

  _eState               : E_NCI_STATE;

  _eResult              : E_PROGRESS;

  // control and state struct from outside world
  _Ctrl                 : POINTER TO ST_CTRL_NCI;
  _State                : POINTER TO ST_STATE_NCI;

  // M function to fetch
  _MFuncCyclic          : POINTER TO ST_NCI_M_FUNC;

  // R[] Params used in G-Code
  // R[0..899]    local namespace of Channel
  // R[900..999]  global namespace of NC
  _R_ParameterRead      : POINTER TO ST_R_Parameter;
  _R_ParameterWrite     : POINTER TO ST_R_Parameter;

  _fPathVelo            : LREAL;
  _nBlockNo             : UDINT;
  _sProgLine            : STRING(100); 
  _nMFunc               : INT;
  _nStateItp            : UINT;

  _iRParamIndex,
  _iRParamCount         : DINT;

  _rRParamsRead,
  _rRParamsWrite        : ARRAY[0..MAX_R_PARA]  OF LREAL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT Check() THEN _eResult := E_PROGRESS.INVALID; RETURN; END_IF


// cyclic data for M func from NCI interface
_MFuncCyclic^.FastMFuncMask   := _NciChannelRef^.NcToPlc.FastMFuncMask;
_MFuncCyclic^.HskMFuncNo      := _NciChannelRef^.NcToPlc.HskMFuncNo;
_MFuncCyclic^.HskMFuncReq     := _NciChannelRef^.NcToPlc.HskMFuncReq;
_MFuncCyclic^.HFuncValue      := _NciChannelRef^.NcToPlc.HFuncValue;

// M-Func to catch
IF HSK 
THEN
  _nMFunc := MFunc;
END_IF


_eCmd                         := _Ctrl^.eCmd;

// cmd change
IF (_eCmd <> _eCmdOld)
THEN
  _eState                     := Cmd(_eCmd);
  _eCmdOld                    := _eCmd;
  _eResult                    := E_PROGRESS.BUSY;
END_IF

CASE _eState
OF
  E_NCI_STATE.NULL:
  E_NCI_STATE.INIT:
  E_NCI_STATE.IDLE:
  E_NCI_STATE.RESET:
  E_NCI_STATE.LOAD_PROG:
  E_NCI_STATE.FEED_TABLE:
  E_NCI_STATE.BUILD_GROUP:
  E_NCI_STATE.CLEAR_GROUP:

  E_NCI_STATE.START:
  E_NCI_STATE.STOP:
  E_NCI_STATE.STO_STOP:
  E_NCI_STATE.RESTART_STEP_ON:

  E_NCI_STATE.M_FUNC_QUIT:

  E_NCI_STATE.READ_R_PARA:
  E_NCI_STATE.WRITE_R_PARA:

ELSE
  _eResult                    := E_PROGRESS.INVALID;
END_CASE


CASE _eResult
OF
  E_PROGRESS.INVALID:
    _State^.eState            := E_PROGRESS.ERROR;

  E_PROGRESS.ERROR:
    _State^.eState            := _eState + E_PROGRESS.ERROR;

  E_PROGRESS.DONE:
    _State^.eState            := _eState + E_PROGRESS.DONE;

ELSE
    _State^.eState            := _eState + _eResult;
END_CASE

_State^.rAxisOverride         := _NciChannelRef^.PlcToNc.ChnAxesOvr;
_State^.bMFuncReq             := TO_BOOL(_NciChannelRef^.NcToPlc.HskMFuncReq);
_State^.nMFunc                := _NciChannelRef^.NcToPlc.HskMFuncNo;

_State^.nItpState             := GetItpState();

]]></ST>
    </Implementation>
    <Folder Name="Actions" Id="{39434ede-33a9-0fb1-0bf2-635e1271e9b6}" />
    <Folder Name="methods" Id="{ba370446-9d57-0cc3-1566-665e50cb472c}">
      <Folder Name="private" Id="{6c8eff13-b321-0e72-2088-796b2427b120}" />
    </Folder>
    <Folder Name="properties" Id="{0bad9cd3-48af-0c30-025a-aeccaaa1800d}" />
    <Action Name="Channel_BuildGroup" Id="{909c4c10-f2bf-0926-130c-e76bcade6acb}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                       := S_FALSE;
    _nState                   := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                 := E_NCI_CTRL.CMD_BUSY;

    _ipNciChannel.I_AuxAxis   := _ipAuxAxis;
    _ipNciChannel.I_McAxis    := _ipMcsAxis;

    _hr                       := _ipNciChannel.BuildGroup(FALSE);

    _nState                   := 20;
END_CASE
CASE _nState OF
  20:
    _hr                       := _ipNciChannel.BuildGroup(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.BuildGroup(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.BuildGroup(FALSE);
        _nState               := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                 := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                 := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_ClearGroup" Id="{47394805-b496-0bb4-3f10-28e323c20b8f}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                       := S_FALSE;
    _nState                   := 10;

  10:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                 := E_NCI_CTRL.CMD_BUSY;

    _ipNciChannel.I_AuxAxis   := _ipAuxAxis;
    _ipNciChannel.I_McAxis    := _ipMcsAxis;

    _hr                       := _ipNciChannel.ClearGroup(FALSE);

    _nState                   := 20;


  20:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                       := _ipNciChannel.ClearGroup(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.ClearGroup(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.ClearGroup(FALSE);
        _nState               := 900;
      END_IF
    END_IF

  100:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                 := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                 := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Confirm" Id="{851e0ce6-5650-0a37-26f3-daeeae6208d5}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                       := S_FALSE;
    _nState                   := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                 := E_NCI_CTRL.CMD_BUSY;

    IF (_stMFuncCyclic.HskMFuncReq > 0)
    THEN
      _hr                     := _ipNciChannel.ConfirmHSK(FALSE);
      _nState                 := 20;
    END_IF
END_CASE
CASE _nState OF
  20:
    _hr                       := _ipNciChannel.ConfirmHSK(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                     := _ipNciChannel.ConfirmHSK(FALSE);
      _nState                 := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                   := _ipNciChannel.ConfirmHSK(FALSE);
        _nState               := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                 := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive               := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                 := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_LoadProg" Id="{71105c07-3b8c-0db8-3a6e-2d05dd9dc2f9}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                 := S_FALSE;
    _nState              := 10;

  10:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive          := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec            := E_NCI_CTRL.CMD_BUSY;

    IF NOT (len(NcProg) > 10)
    THEN
      _nState             := 900;
    ELSE
      _ipNciChannel.Prog  := NcProg;
  
      _hr                 := _ipNciChannel.LoadProg(FALSE);
  
      _nState             := 20;
    END_IF

  20:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 1;
    _hr                 := _ipNciChannel.LoadProg(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr               := _ipNciChannel.LoadProg(FALSE);

      _nState            := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr             := _ipNciChannel.LoadProg(FALSE);

        _nState          := 900;
      END_IF
    END_IF

  100:
    _ipNciChannel.pNciChannelRef^.PlcToNc.MFuncGranted := 0;
    _eCmdActive          := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec            := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive          := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec            := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_R_Read" Id="{be5f8309-0c77-0607-38b2-159f5bf2d6a5}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec      := E_NCI_CTRL.CMD_BUSY;

    _iri          := _iRParamIndex;
    _irc          := _iRParamCount;
    _hr           := _ipNciChannel.ReadRParams(FALSE,
                                               ADR(_rRParamsRead),
                                               _iri,
                                               _irc);
    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.ReadRParams(TRUE,
                                               ADR(_rRParamsRead),
                                               _iri,
                                               _irc);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.ReadRParams(FALSE,
                                ADR(_rRParamsRead),
                                _iri,
                                _irc);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.ReadRParams(FALSE,
                                  ADR(_rRParamsRead),
                                  _iri,
                                  _irc);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec      := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec      := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_R_Write" Id="{fb5d44a8-06cd-02ec-29d5-e6a9f015d822}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec      := E_NCI_CTRL.CMD_BUSY;

    _iri          := _iRParamIndex;
    _irc          := _iRParamCount;
    _hr           := _ipNciChannel.WriteRParams(FALSE,
                                                ADR(_rRParamsWrite),
                                                _iri,
                                                _irc);
    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.WriteRParams(TRUE,
                                                ADR(_rRParamsWrite),
                                                _iri,
                                                _irc);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.WriteRParams(FALSE,
                                 ADR(_rRParamsWrite),
                                 _iri,
                                 _irc);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.WriteRParams(FALSE,
                                   ADR(_rRParamsWrite),
                                   _iri,
                                   _irc);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec      := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec      := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Reset" Id="{50a33252-096c-02bb-3e41-95aa8baee370}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr           := S_FALSE;
    _nState        := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec      := E_NCI_CTRL.CMD_BUSY;

    _hr           := _ipNciChannel.ItpReset(FALSE);

    _nState := 20;
END_CASE
CASE _nState OF
  20:
    _hr           := _ipNciChannel.ItpReset(TRUE);

    IF (_hr = S_OK)
    THEN
      _ipNciChannel.ItpReset(FALSE);
      _nState      := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _ipNciChannel.ItpReset(FALSE);
        _nState    := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec      := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive    := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec      := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Restart" Id="{0d289702-76a4-048d-0206-c91637b8cd79}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                := E_NCI_CTRL.CMD_BUSY;

    _hr                     := _ipNciChannel.StepOnAfterEStop(FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StepOnAfterEStop(TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StepOnAfterEStop(FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StepOnAfterEStop(FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Start" Id="{c59a79f3-b20e-041f-0975-135263d187e2}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                := E_NCI_CTRL.CMD_BUSY;

    _hr                     := _ipNciChannel.StartStop(FALSE, FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StartStop(TRUE, FALSE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StartStop(FALSE, FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StartStop(FALSE, FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="Channel_Stop" Id="{b3249cbc-3c82-0ab7-16a7-cd8fa483ce00}" FolderPath="Actions\">
      <Implementation>
        <ST><![CDATA[CASE _nState OF
  0:
    _hr                     := S_FALSE;
    _nState                  := 10;
END_CASE
CASE _nState OF
  10:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_BUSY;
    _eCmdExec                := E_NCI_CTRL.CMD_BUSY;

    _hr                     := _ipNciChannel.StartStop(FALSE, FALSE);

    _nState                  := 20;
END_CASE
CASE _nState OF
  20:
    _hr                     := _ipNciChannel.StartStop(FALSE, TRUE);

    IF (_hr = S_OK)
    THEN
      _hr                   := _ipNciChannel.StartStop(FALSE, FALSE);
      _nState                := 100;
    ELSE
      IF (_hr > S_FALSE)
      THEN
        _hr                 := _ipNciChannel.StartStop(FALSE, FALSE);
        _nState              := 900;
      END_IF
    END_IF
END_CASE
CASE _nState OF
  100:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_DONE;
    _eCmdExec                := E_NCI_CTRL.CMD_DONE;
END_CASE
CASE _nState OF
  900:
    _eCmdActive              := eCmd + E_NCI_CTRL.CMD_ERROR;
    _eCmdExec                := E_NCI_CTRL.CMD_ERROR;
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Method Name="Check" Id="{e5e6ebbd-f80c-073c-29c0-ccb34bd47eb2}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Check : BOOL
VAR_INST
 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT SUPER^.Check() THEN RETURN; END_IF

IF NOT (_Ctrl <> 0)
THEN
  _eCheck                     := E_CHECK_STATE.NCI_CTRL_POINTER_INVALID;
  RETURN;
END_IF

IF NOT (_State <> 0)
THEN
  _eCheck                     := E_CHECK_STATE.NCI_STATE_POINTER_INVALID;
  RETURN;
END_IF

IF NOT (_R_ParameterRead <> 0)
THEN
  _eCheck                     := E_CHECK_STATE.NCI_R_PARAMETER_READ_POINTER_INVALID;
  RETURN;
END_IF

IF NOT (_R_ParameterWrite <> 0)
THEN
  _eCheck                     := E_CHECK_STATE.NCI_R_PARAMETER_WRITE_POINTER_INVALID;
  RETURN;
END_IF

IF NOT (_MFuncCyclic <> 0)
THEN
  _eCheck                     := E_CHECK_STATE.NCI_M_FUNC_POINTER_INVALID;
  RETURN;
END_IF

_eCheck                       := E_CHECK_STATE.CHECK_DONE;
Check                         := TRUE;



]]></ST>
      </Implementation>
    </Method>
    <Method Name="Chn_BuildGroup" Id="{105aa46f-22c9-0eeb-0410-920d223d85dc}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Chn_BuildGroup : E_PROGRESS
VAR_INPUT
  Execute           : BOOL;
END_VAR
VAR_INST
  _eState           : E_PROGRESS;
  _rValue           : LREAL;
  _udiErr           : UDINT;
  _stMsg            : ST_Message;


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN Chn_BuildGroup := E_PROGRESS.ERROR; RETURN; END_IF
IF NOT Execute THEN _eState := E_PROGRESS.INIT; END_IF

CASE _eState
OF
  E_PROGRESS.INIT:
    IF Execute 
    THEN
      memset(ADR(_stMsg),0,SIZEOF(_stMsg));
      _udiErr                       := 0;
      _rValue                       := 0;
      _eState                       := E_PROGRESS.BUSY;
    END_IF
END_CASE
CASE _eState
OF
  E_PROGRESS.BUSY:
    _eState                         := E_PROGRESS.STARTUP;
END_CASE
CASE _eState
OF
  E_PROGRESS.STARTUP:
    _eState                       := E_PROGRESS.PREPARE;
END_CASE
CASE _eState
OF
  E_PROGRESS.PREPARE:
    _eState                         := E_PROGRESS.READY;
END_CASE
CASE _eState
OF
  E_PROGRESS.READY:
    _eState                         := E_PROGRESS.WAITING;
END_CASE
CASE _eState
OF
  E_PROGRESS.WAITING:
    _eState                         := E_PROGRESS.WORKING;
END_CASE
CASE _eState
OF
  E_PROGRESS.WORKING:
    _eState                         := E_PROGRESS.DONE;
END_CASE

Template_1 := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ChnCtrl" Id="{8ba6e329-872d-00e7-0614-e9246ddef2fe}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ChnCtrl : pointer to ST_CTRL_NCI]]></Declaration>
      <Set Name="Set" Id="{9bcb6298-736a-03aa-34f9-c23240802100}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Ctrl := ChnCtrl;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="ChnId" Id="{b4fc453f-6a7a-04a9-081a-3b969f557243}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ChnId : udint]]></Declaration>
      <Get Name="Get" Id="{e0b113b9-9605-07d3-2a83-391ba3c31228}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ChnId := _ipNciChannel.pNciChannelRef^.NcToPlc.ChnId;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ChnState" Id="{96be0409-6b12-073c-317f-f6f3dd8307a9}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ChnState : pointer to ST_STATE_NCI]]></Declaration>
      <Set Name="Set" Id="{7d2cf0ac-e5f6-0e29-29b8-528a35ff2472}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_State := ChnState;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Cmd" Id="{d6479c6f-6d9b-03ad-2b7b-afdf9625f728}" FolderPath="methods\private\">
      <Declaration><![CDATA[METHOD Cmd  : E_NCI_STATE
VAR_INPUT
  eCmd      : E_NCI_CTRL;
END_VAR
VAR_INST
  _estate   : E_NCI_STATE;
  _stMsg    : ST_Message;
  _sState   : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE eCmd
OF
  E_NCI_CTRL.INIT:
    _eState           := E_NCI_STATE.INIT;

  E_NCI_CTRL.IDLE:
    _eState           := E_NCI_STATE.IDLE;

  E_NCI_CTRL.RESET:
    _eState           := E_NCI_STATE.RESET;

  E_NCI_CTRL.LOAD_PROG:
    _eState           := E_NCI_STATE.LOAD_PROG;

  E_NCI_CTRL.FEED_TABLE:
    _eState           := E_NCI_STATE.FEED_TABLE;

  E_NCI_CTRL.BUILD_GROUP:
    _eState           := E_NCI_STATE.BUILD_GROUP;

  E_NCI_CTRL.CLEAR_GROUP:
    _eState           := E_NCI_STATE.CLEAR_GROUP;

  E_NCI_CTRL.START:
    _eState           := E_NCI_STATE.START;

  E_NCI_CTRL.STOP:
    _eState           := E_NCI_STATE.STOP;

  E_NCI_CTRL.STO_STOP:
    _eState           := E_NCI_STATE.STO_STOP;

  E_NCI_CTRL.RESTART_STEP_ON:
    _eState           := E_NCI_STATE.RESTART_STEP_ON;

  E_NCI_CTRL.M_FUNC_QUIT:
    _eState           := E_NCI_STATE.M_FUNC_QUIT;

  E_NCI_CTRL.READ_R_PARA:
    _eState           := E_NCI_STATE.READ_R_PARA;

  E_NCI_CTRL.WRITE_R_PARA:
    _eState           := E_NCI_STATE.WRITE_R_PARA;

ELSE
    _eState           := E_NCI_STATE.NULL;
END_CASE

_sState               := TO_STRING(_eState);

_stMsg.eType          := E_MessageType.eMessageInfo;
_stMsg.eDevice        := E_Device.NciChannelCtrl + TO_DINT(ChnId);
_stMsg.eSubdevice     := e_Subdevice.Ctrl_Nci_Cmd;
_stMsg.iErrorNumber   := _nChnId;

_stMsg.sText          := 'Change to E_NCI_STATE.';
_stMsg.sText          := Tc2_Standard.CONCAT(_stMsg.sText, _sState);
f_MessageSet(_stMsg);

Cmd                   := _eState;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="ItfChannel" Id="{9649047d-6a01-03f4-2290-fc77c4980149}" FolderPath="properties\">
      <Declaration><![CDATA[PROPERTY ItfChannel : I_NciChannel]]></Declaration>
      <Get Name="Get" Id="{dba2e612-8feb-0761-0d03-93a353fa309a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ItfChannel := SUPER^;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Template" Id="{e9779cbd-b047-0927-1afc-2a205c1c1e40}" FolderPath="methods\">
      <Declaration><![CDATA[METHOD Template : E_PROGRESS
VAR_INPUT
  Execute           : BOOL;
END_VAR
VAR_INST
  _eState           : E_PROGRESS;
  _rValue           : LREAL;
  _udiErr           : UDINT;
  _stMsg            : ST_Message;


END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Check() THEN _eState := E_PROGRESS.ERROR; END_IF
IF NOT Execute THEN _eState := E_PROGRESS.INIT; END_IF

CASE _eState
OF
  E_PROGRESS.INIT:
    IF Execute 
    THEN
      memset(ADR(_stMsg),0,SIZEOF(_stMsg));
      _udiErr                       := 0;
      _rValue                       := 0;
      _eState                       := E_PROGRESS.BUSY;
    END_IF
END_CASE
CASE _eState
OF
  E_PROGRESS.BUSY:
    _eState                         := E_PROGRESS.STARTUP;
END_CASE
CASE _eState
OF
  E_PROGRESS.STARTUP:
    _eState                       := E_PROGRESS.PREPARE;
END_CASE
CASE _eState
OF
  E_PROGRESS.PREPARE:
    _eState                         := E_PROGRESS.READY;
END_CASE
CASE _eState
OF
  E_PROGRESS.READY:
    _eState                         := E_PROGRESS.WAITING;
END_CASE
CASE _eState
OF
  E_PROGRESS.WAITING:
    _eState                         := E_PROGRESS.WORKING;
END_CASE
CASE _eState
OF
  E_PROGRESS.WORKING:
    _eState                         := E_PROGRESS.DONE;
END_CASE

Template_1 := _eState;
]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_NciChannelCtrl">
      <LineId Id="56" Count="14" />
      <LineId Id="196" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="76" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="200" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="204" Count="18" />
      <LineId Id="203" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="224" Count="3" />
      <LineId Id="229" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="240" Count="2" />
      <LineId Id="244" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_BuildGroup">
      <LineId Id="2" Count="41" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_ClearGroup">
      <LineId Id="2" Count="43" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_Confirm">
      <LineId Id="2" Count="40" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_LoadProg">
      <LineId Id="2" Count="48" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_R_Read">
      <LineId Id="2" Count="51" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_R_Write">
      <LineId Id="2" Count="51" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_Reset">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_Restart">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_Start">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Channel_Stop">
      <LineId Id="2" Count="38" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Check">
      <LineId Id="44" Count="0" />
      <LineId Id="3" Count="36" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Chn_BuildGroup">
      <LineId Id="3" Count="45" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.ChnCtrl.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.ChnId.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.ChnState.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Cmd">
      <LineId Id="12" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="44" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="46" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="25" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="53" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="61" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="5" />
      <LineId Id="74" Count="1" />
      <LineId Id="38" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.ItfChannel.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_NciChannelCtrl.Template">
      <LineId Id="3" Count="45" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>