<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{b9c2507d-2926-4719-8f82-549e0347748a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
  bInit                     : BOOL;
  eInit                     : E_PROGRESS;

  nAxis,
  nAxisInit                 : UINT;

  stMsg                     : ST_Message;

  bWriteLog                 : BOOL;
  rtrigWriteFile            : Tc2_Standard.R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Local time; used for timestamps
GVL_MSG.fbLocalTime(sLocalTime=> GVL_MSG.sLocalTime, dtLocalTime=> GVL_MSG.dtLocalTime);

//-----------------------------------------------------------------------------------------------------------------
// /assign dataflow
//-----------------------------------------------------------------------------------------------------------------
FOR nAxis := 1 TO PLC_CONSTANT.MAX_AXIS
DO
  GVL_AXIS.Control[nAxis].AxisIndex               := nAxis;

  GVL_AXIS.Control[nAxis].AxisCtrl                := ADR(GVL_AXIS.Ctrl);          // command
  GVL_AXIS.Control[nAxis].AxisState               := ADR(GVL_AXIS.State);         // state + result of command

  GVL_AXIS.Control[nAxis].Axes                    REF=   GVL_AXIS.AxisRef;        // All for one; coupling requires access across all axes

  GVL_AXIS.Control[nAxis].AxisInfo                := ADR(GVL_AXIS.Info);          // axis information: act/set values and bits from axis
  GVL_AXIS.Control[nAxis].AxisData                := ADR(GVL_AXIS.Data);          // position and dynamic constraints for movement
  GVL_AXIS.Control[nAxis].AxisGearInParameter     := ADR(GVL_AXIS.GearInParameter);

  GVL_AXIS.Control[nAxis].WriteNcParameter        := ADR(GVL_AXIS.NcParameterWrt);
  GVL_AXIS.Control[nAxis].ReadNcParameter         := ADR(GVL_AXIS.NcParameterRd);

  GVL_AXIS.Control[nAxis].HomingParameter         := ADR(GVL_AXIS.HomeParameter);
  GVL_AXIS.Control[nAxis].MotionOptions           := ADR(GVL_AXIS.MotionOptions);

  GVL_AXIS.ItfMcAxis[nAxis]                       := GVL_AXIS.Control[nAxis]; 
END_FOR
//-----------------------------------------------------------------------------------------------------------------
// assign dataflow/
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// /INIT
//-----------------------------------------------------------------------------------------------------------------
IF NOT bInit
THEN
  CASE eInit
  OF
    E_PROGRESS.INVALID,
    E_PROGRESS.DONE:
      nAxisInit                                   := 1;
      eInit                                       := E_PROGRESS.INIT;


    E_PROGRESS.INIT:
      stMsg.eType                                 := E_MessageType.eMessageInfo;
      stMsg.eDevice                               := e_Device.General;
      stMsg.eSubdevice                            := e_SubDevice.fbAxis;
      stMsg.iErrorNumber                          := nAxisInit;

      stMsg.sText                                 := concat('MAIN.eInit: ', TO_STRING(eInit));
      f_MessageSet(stMsg);

      GVL_AXIS.Ctrl[nAxisInit].eCtrl              := E_AXIS_CTRL.AXIS_NULL;
      eInit                                       := E_PROGRESS.BUSY;


    E_PROGRESS.BUSY:
      GVL_AXIS.Ctrl[nAxisInit].eCtrl              := E_AXIS_CTRL.AXIS_INIT;

      IF    (GVL_AXIS.State[nAxisInit].eState = E_AXIS_STATE.AXIS_INIT + E_PROGRESS.ERROR)
      THEN
        eInit                                     := E_PROGRESS.ERROR;

        stMsg.eType                               := E_MessageType.eMessageError;
        stMsg.eDevice                             := e_Device.General;
        stMsg.eSubdevice                          := e_SubDevice.fbAxis;
        stMsg.iErrorNumber                        := GVL_AXIS.Control[nAxisInit].ErrorId;

        stMsg.sText                               := concat('MAIN.eInit ERROR at Index: ', TO_STRING(nAxisInit));
        f_MessageSet(stMsg);

      ELSIF (GVL_AXIS.State[nAxisInit].eState = E_AXIS_STATE.AXIS_INIT + E_PROGRESS.DONE)
      THEN
        eInit                                     := E_PROGRESS.READY;
      END_IF


    E_PROGRESS.READY:
      IF (nAxisInit > PLC_CONSTANT.MAX_AXIS-1)
      THEN
        bInit                                     := TRUE;
        eInit                                     := E_PROGRESS.DONE;

        stMsg.eType                               := E_MessageType.eMessageInfo;
        stMsg.eDevice                             := e_Device.General;
        stMsg.eSubdevice                          := e_SubDevice.fbAxis;
        stMsg.iErrorNumber                        := MAX_AXIS;

        stMsg.sText                               := concat('MAIN.eInit: ', TO_STRING(eInit));
        f_MessageSet(stMsg);

      ELSE
        nAxisInit                                 := nAxisInit + 1;
        eInit                                     := E_PROGRESS.INIT;
      END_IF
  END_CASE
END_IF
//-----------------------------------------------------------------------------------------------------------------
// INIT
//-----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------
// /cyclic
//-----------------------------------------------------------------------------------------------------------------
IF (eInit <> E_PROGRESS.ERROR)
THEN
  FOR nAxis := 1 TO PLC_CONSTANT.MAX_AXIS
  DO
      GVL_AXIS.Control[nAxis]();
  END_FOR
END_IF
//-----------------------------------------------------------------------------------------------------------------
// cyclic/
//-----------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------
// /logging
//-----------------------------------------------------------------------------------------------------------------
rtrigWriteFile(CLK:= bWriteLog);
IF rtrigWriteFile.Q
THEN
  MessageData.bWriteFile := TRUE;
END_IF

//-----------------------------------------------------------------------------------------------------------------
// write message list to file
//-----------------------------------------------------------------------------------------------------------------
MessageData(pList			        := ADR(GVL_MSG.Messages),
			      pLocalTime        := ADR(GVL_MSG.dtLocalTime), 
			      bBusy=> );

// clear write trigger
IF MessageData.bWriteFile AND
   MessageData.bDone
THEN
  bWriteLog                   := FALSE;
  MessageData.bWriteFile      := FALSE;
END_IF
//-----------------------------------------------------------------------------------------------------------------
// logging/
//-----------------------------------------------------------------------------------------------------------------


]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="34" Count="1" />
      <LineId Id="132" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="106" Count="1" />
      <LineId Id="280" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="150" Count="7" />
      <LineId Id="278" Count="0" />
      <LineId Id="172" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="174" Count="0" />
      <LineId Id="269" Count="6" />
      <LineId Id="268" Count="0" />
      <LineId Id="171" Count="0" />
      <LineId Id="176" Count="1" />
      <LineId Id="210" Count="0" />
      <LineId Id="158" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="228" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="238" Count="1" />
      <LineId Id="243" Count="0" />
      <LineId Id="240" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="182" Count="1" />
      <LineId Id="185" Count="1" />
      <LineId Id="188" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="189" Count="3" />
      <LineId Id="260" Count="7" />
      <LineId Id="258" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="194" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="2" />
      <LineId Id="85" Count="2" />
      <LineId Id="221" Count="1" />
      <LineId Id="88" Count="3" />
      <LineId Id="223" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="65" Count="7" />
      <LineId Id="38" Count="0" />
      <LineId Id="40" Count="13" />
      <LineId Id="74" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>